diff --git a/src/components/dashboard/DashboardLayout.astro b/src/components/dashboard/DashboardLayout.astro
index c59640c..03d8fd1 100644
--- a/src/components/dashboard/DashboardLayout.astro
+++ b/src/components/dashboard/DashboardLayout.astro
@@ -25,6 +25,16 @@ const currentPath = Astro.url.pathname;
       href="https://fonts.googleapis.com/css2?family=Manrope:wght@300;400;500;600;700&display=swap"
       rel="stylesheet"
     />
+
+    <!-- ✅ Inject USRadUser globally - FIXED -->
+    <script type="module" define:vars={{ user }}>
+      if (typeof window !== "undefined") {
+        window.USRadUser = {
+          user: user,
+        };
+      }
+    </script>
+
     <style>
       body {
         font-family: "Manrope", sans-serif;
@@ -715,159 +725,35 @@ const currentPath = Astro.url.pathname;
         }
       }
     </style>
-    <script is:inline>
-      // Fixed version - no import.meta
-async function loadUserProgress() {
-  try {
-    if (!window.USRadUser?.user?.id) {
-      console.log('❌ No user ID found for progress loading');
-      return;
-    }
-
-    // Get environment variables from data attributes or global config
-    const supabaseUrl = document.documentElement.getAttribute('data-supabase-url') || 
-                       'https://skpxihbmwdswmcajnhut.supabase.co';
-    const supabaseKey = document.documentElement.getAttribute('data-supabase-anon-key') || 
-                       'your-anon-key-here';
-
-    // Create Supabase client
-    const { createClient } = window.supabase || {};
-    if (!createClient) {
-      console.log('❌ Supabase not available globally');
-      return;
-    }
-
-    
-
-    const { data, error } = await supabaseClient
-      .from('user_profiles')
-      .select('onboarding_progress, facilities_configured, psa_signed, company_name')
-      .eq('id', window.USRadUser.user.id)
-      .single();
-
-    if (error) {
-      console.error('Error loading user progress:', error);
-      return;
-    }
-
-    if (data) {
-      console.log('📊 Real progress loaded:', data);
-
-      const progress = data.onboarding_progress || 0;
-
-      // Update "Unlock Premium" card
-      const unlockButtons = document.querySelectorAll('[data-unlock-progress]');
-      unlockButtons.forEach(button => {
-        button.textContent = `${progress}% Complete`;
-        button.style.color = ''; // Remove the red test color
-        console.log(`✅ Updated unlock button to ${progress}% Complete`);
-      });
-
-      // Update other progress elements
-      const progressBars = document.querySelectorAll('[data-progress-bar]');
-      progressBars.forEach(bar => {
-        bar.style.width = `${progress}%`;
-      });
-
-      const progressTexts = document.querySelectorAll('[data-progress-text]');
-      progressTexts.forEach(text => {
-        text.textContent = `${progress}%`;
-      });
-    }
-  } catch (error) {
-    console.error('Error in loadUserProgress:', error);
-  }
-}
-
-  // Function to update the banner based on progress
-  function updateProgressBanner(progress, facilitiesConfigured, psaSigned) {
-    const banner = document.querySelector('[data-progress-banner]');
-    const title = document.querySelector('[data-banner-title]');
-    const subtitle = document.querySelector('[data-banner-subtitle]');
-    const cta = document.querySelector('[data-banner-cta]');
-
-    if (!banner || !title || !subtitle || !cta) return;
-
-    let bannerConfig = {};
-
-    // Progressive banner logic based on completion status
-    if (progress >= 100) {
-      // 100% Complete - Hide banner or show success
-      banner.style.display = 'none';
-      return;
-    } else if (progress >= 75) {
-      // CAQH Complete - Need Banking
-      bannerConfig = {
-        title: "Complete banking setup to go live",
-        subtitle: "Final step: Set up payment processing to activate your account",
-        ctaText: "Complete Banking",
-        ctaLink: "/dashboard/onboarding/banking",
-        color: "linear-gradient(135deg, #059669 0%, #047857 100%)" // Green
-      };
-    } else if (progress >= 50) {
-      // PSA Complete - Need CAQH
-      bannerConfig = {
-        title: "Complete CAQH credentialing to continue",
-        subtitle: "Provider verification required for network participation",
-        ctaText: "Complete CAQH",
-        ctaLink: "/dashboard/onboarding/caqh",
-        color: "linear-gradient(135deg, #7c3aed 0%, #5b21b6 100%)" // Purple
-      };
-    } else if (progress >= 25) {
-      // Facilities Complete - Need PSA
-      bannerConfig = {
-        title: "Complete your PSA to unlock premium features",
-        subtitle: "Sign your Provider Service Agreement to access advanced training and analytics",
-        ctaText: "Complete PSA →",
-        ctaLink: "/dashboard/onboarding/psa",
-        color: "linear-gradient(135deg, #f59e0b 0%, #d97706 100%)" // Orange/Yellow
-      };
-    } else {
-      // No progress - Need Facilities
-      bannerConfig = {
-        title: "Complete facility setup to continue",
-        subtitle: "Get started by configuring your imaging center locations",
-        ctaText: "Get Started",
-        ctaLink: "/dashboard/onboarding/facilities",
-        color: "linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)" // Red
-      };
-    }
-
-      // Trigger progress load after DOM is ready
-      document.addEventListener("DOMContentLoaded", () => {
-        console.log("🔄 DOM loaded, attempting to load user progress...");
-        setTimeout(() => {
-          loadUserProgress();
-        }, 2000);
-      });
-    </script>
   </head>
 
   <body class="bg-gradient-to-br from-usrad-light to-white">
-    <!-- PSA Banner at top level -->
+    <!-- PSA Banner at top level - FIXED -->
     {
-      !user?.hasCompletedPSA && !Astro.cookies.get("hide_psa_banner") && (
-        <div
-          id="psa-banner"
-          style="background-color: #fff8dc; color: #111827; padding: 1rem; text-align: center; position: relative; z-index: 60;"
-        >
-          <strong>
-            Complete your Provider Service Agreement to unlock full access.
-          </strong>
-          <a
-            href="/dashboard/onboarding"
-            style="margin-left: 1rem; background: #2563eb; color: white; padding: 0.5rem 1rem; border-radius: 6px; text-decoration: none;"
-          >
-            Finish Setup
-          </a>
-          <button
-            onclick="document.querySelector('#psa-banner').remove(); document.cookie = 'hide_psa_banner=true; path=/'"
-            style="position: absolute; top: 8px; right: 12px; background: none; border: none; font-size: 20px; cursor: pointer;"
+      user &&
+        !user.hasCompletedPSA &&
+        !Astro.cookies.get("hide_psa_banner") && (
+          <div
+            id="psa-banner"
+            style="background-color: #fff8dc; color: #111827; padding: 1rem; text-align: center; position: relative; z-index: 60;"
           >
-            ×
-          </button>
-        </div>
-      )
+            <strong>
+              Complete your Provider Service Agreement to unlock full access.
+            </strong>
+            <a
+              href="/dashboard/onboarding"
+              style="margin-left: 1rem; background: #2563eb; color: white; padding: 0.5rem 1rem; border-radius: 6px; text-decoration: none;"
+            >
+              Finish Setup
+            </a>
+            <button
+              onclick="document.querySelector('#psa-banner').remove(); document.cookie = 'hide_psa_banner=true; path=/'"
+              style="position: absolute; top: 8px; right: 12px; background: none; border: none; font-size: 20px; cursor: pointer;"
+            >
+              ×
+            </button>
+          </div>
+        )
     }
 
     <!-- Mobile Menu Overlay -->
@@ -877,10 +763,10 @@ async function loadUserProgress() {
     >
     </div>
 
-    <!-- Enhanced Sidebar with Progressive Disclosure -->
+    <!-- Enhanced Sidebar with Progressive Disclosure - FIXED -->
     <aside
       id="sidebar"
-      class={`fixed top-0 left-0 z-50 w-72 h-screen usrad-gradient-navy text-white sidebar-transition mobile-menu-closed lg:mobile-menu-open lg:translate-x-0 shadow-2xl ${!user?.hasCompletedPSA ? "pt-12" : ""}`}
+      class={`fixed top-0 left-0 z-50 w-72 h-screen usrad-gradient-navy text-white sidebar-transition mobile-menu-closed lg:mobile-menu-open lg:translate-x-0 shadow-2xl ${user && !user.hasCompletedPSA ? "pt-12" : ""}`}
     >
       <!-- Logo Section -->
       <div
@@ -916,14 +802,16 @@ async function loadUserProgress() {
         </button>
       </div>
 
-      <!-- Enhanced User Info with Progress -->
+      <!-- Enhanced User Info with Progress - FIXED -->
       {
         user && (
           <div class="p-6 border-b border-blue-800 bg-gradient-to-r from-blue-800/20 to-transparent">
             <div class="flex items-center space-x-4">
               <div class="relative">
                 <div class="w-12 h-12 usrad-gradient-gold rounded-full flex items-center justify-center font-bold text-usrad-navy text-lg shadow-lg animate-glow">
-                  {user.firstName?.[0] || user.email[0].toUpperCase()}
+                  {user.firstName && user.firstName[0]
+                    ? user.firstName[0]
+                    : user.email[0].toUpperCase()}
                 </div>
                 <div class="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white animate-pulse" />
               </div>
@@ -998,7 +886,6 @@ async function loadUserProgress() {
             >
             </div>
           </div>
-          <!-- ⭐ THIS IS THE KEY CHANGE - Add data attribute and default to 0% -->
           <span
             data-unlock-progress
             class="text-xs text-yellow-300 font-semibold">0% Complete</span
@@ -1006,7 +893,7 @@ async function loadUserProgress() {
         </div>
       </div>
 
-      <!-- Navigation -->
+      <!-- Navigation - FIXED -->
       <nav class="flex-1 px-4 py-2 space-y-2">
         {
           [
@@ -1064,13 +951,14 @@ async function loadUserProgress() {
             if (item.divider) {
               return (
                 item.divider &&
-                !user?.hasCompletedPSA && (
+                user &&
+                !user.hasCompletedPSA && (
                   <hr class="my-4 border-blue-900 opacity-20" />
                 )
               );
             }
             const { href, icon, label, unlocked } = item;
-            const isLocked = !unlocked && !user?.hasCompletedPSA;
+            const isLocked = !unlocked && user && !user.hasCompletedPSA;
             return (
               <a
                 href={href}
@@ -1143,7 +1031,7 @@ async function loadUserProgress() {
 
     <!-- Main Content -->
     <div class="lg:ml-72 min-h-screen">
-      <!-- Top Header -->
+      <!-- Top Header - FIXED -->
       <header
         class="bg-white backdrop-blur-md shadow-sm border-b border-gray-200 px-6 py-4 relative z-30"
       >
@@ -1169,7 +1057,7 @@ async function loadUserProgress() {
             <div>
               <h1 class="text-2xl font-bold usrad-navy">{title}</h1>
               <p class="text-sm text-gray-600">
-                Welcome back, {user?.firstName || "User"}
+                Welcome back, {user && user.firstName ? user.firstName : "User"}
               </p>
             </div>
           </div>
@@ -1205,7 +1093,7 @@ async function loadUserProgress() {
               >
             </button>
 
-            <!-- Profile & Logout -->
+            <!-- Profile & Logout - FIXED -->
             <div class="flex items-center space-x-3">
               <!-- Profile Info -->
               <div
@@ -1214,10 +1102,16 @@ async function loadUserProgress() {
                 <div
                   class="w-8 h-8 usrad-gradient-gold rounded-lg flex items-center justify-center font-bold text-usrad-navy text-sm"
                 >
-                  {user?.firstName?.[0] || user?.email[0].toUpperCase() || "U"}
+                  {
+                    user && user.firstName && user.firstName[0]
+                      ? user.firstName[0]
+                      : user && user.email && user.email[0]
+                        ? user.email[0].toUpperCase()
+                        : "U"
+                  }
                 </div>
                 <span class="text-sm font-medium text-gray-700 sm:block">
-                  {user?.firstName || "User"}
+                  {user && user.firstName ? user.firstName : "User"}
                 </span>
               </div>
 
@@ -1361,122 +1255,22 @@ async function loadUserProgress() {
         }
       });
     </script>
-    <script>
-      document.addEventListener("DOMContentLoaded", function () {
-        // Get Supabase config from meta tags
-        const supabaseUrl = document.querySelector(
-          'meta[name="supabase-url"]'
-        )?.content;
-        const supabaseAnonKey = document.querySelector(
-          'meta[name="supabase-anon-key"]'
-        )?.content;
 
-        if (!supabaseUrl || !supabaseAnonKey) {
-          console.error("Missing Supabase configuration in dashboard");
-          return;
-        }
-
-        // Load Supabase and handle logout
-        import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm")
-          .then(({ createClient }) => {
-            
-
-            // Handle logout button click
-            const logoutButton = document.getElementById("logout-button");
-            if (logoutButton) {
-              logoutButton.addEventListener("click", async function () {
-                const button = this;
-                const logoutText = document.getElementById("logout-text");
-                const logoutLoading = document.getElementById("logout-loading");
-
-                // Show loading state
-                button.disabled = true;
-                if (logoutText) logoutText.classList.add("hidden");
-                if (logoutLoading) logoutLoading.classList.remove("hidden");
-
-                try {
-                  // Sign out with Supabase directly
-                  const { error } = await supabaseClient.auth.signOut();
-
-                  if (error) {
-                    throw error;
-                  }
-
-                  // Add success flag and redirect
-                  sessionStorage.setItem("logout_success", "true");
-                  window.location.href = "/";
-                } catch (error) {
-                  console.error("Logout error:", error);
-                  alert("Error signing out. Please try again.");
-
-                  // Reset button state
-                  button.disabled = false;
-                  if (logoutText) logoutText.classList.remove("hidden");
-                  if (logoutLoading) logoutLoading.classList.add("hidden");
-                }
-              });
-            }
-
-            // Handle sidebar logout button click
-            const sidebarLogoutButton = document.getElementById(
-              "sidebar-logout-button"
-            );
-            if (sidebarLogoutButton) {
-              sidebarLogoutButton.addEventListener("click", async function () {
-                const button = this;
-                const sidebarLogoutText = document.getElementById(
-                  "sidebar-logout-text"
-                );
-                const sidebarLogoutLoading = document.getElementById(
-                  "sidebar-logout-loading"
-                );
-
-                // Show loading state
-                button.disabled = true;
-                if (sidebarLogoutText)
-                  sidebarLogoutText.classList.add("hidden");
-                if (sidebarLogoutLoading)
-                  sidebarLogoutLoading.classList.remove("hidden");
-
-                try {
-                  // Sign out with Supabase directly
-                  const { error } = await supabaseClient.auth.signOut();
-
-                  if (error) {
-                    throw error;
-                  }
-
-                  // Add success flag and redirect
-                  sessionStorage.setItem("logout_success", "true");
-                  window.location.href = "/";
-                } catch (error) {
-                  console.error("Sidebar logout error:", error);
-                  alert("Error signing out. Please try again.");
-
-                  // Reset button state
-                  button.disabled = false;
-                  if (sidebarLogoutText)
-                    sidebarLogoutText.classList.remove("hidden");
-                  if (sidebarLogoutLoading)
-                    sidebarLogoutLoading.classList.add("hidden");
-                }
-              });
-            }
-          })
-          .catch((error) => {
-            console.error("Failed to load Supabase for logout:", error);
-          });
-      });
-    </script>
+    <!-- Enhanced Supabase Auth & Progress Management Script - FIXED -->
     <script>
       document.addEventListener("DOMContentLoaded", async function () {
-        // Get Supabase config
-        const supabaseUrl = document.querySelector(
+        // Get Supabase config - FIXED
+        const supabaseUrlMeta = document.querySelector(
           'meta[name="supabase-url"]'
-        )?.content;
-        const supabaseAnonKey = document.querySelector(
+        );
+        const supabaseAnonKeyMeta = document.querySelector(
           'meta[name="supabase-anon-key"]'
-        )?.content;
+        );
+
+        const supabaseUrl = supabaseUrlMeta ? supabaseUrlMeta.content : null;
+        const supabaseAnonKey = supabaseAnonKeyMeta
+          ? supabaseAnonKeyMeta.content
+          : null;
 
         if (!supabaseUrl || !supabaseAnonKey) {
           console.error("Missing Supabase configuration");
@@ -1490,12 +1284,14 @@ async function loadUserProgress() {
           );
           const supabase = createClient(supabaseUrl, supabaseAnonKey);
 
-          // Initialize user management
+          // Enhanced User Management with Real-time Progress
           window.USRadUser = {
             supabase: supabase,
             user: null,
             profile: null,
             imagingCenter: null,
+            currentProgress: null,
+            progressChannel: null,
 
             // Load user data
             async loadUserData() {
@@ -1514,9 +1310,13 @@ async function loadUserProgress() {
                     .single();
 
                   this.profile = profile;
+                  this.currentProgress =
+                    profile && profile.onboarding_progress
+                      ? profile.onboarding_progress
+                      : 0;
 
                   // Get imaging center if profile has one
-                  if (profile?.imaging_center_id) {
+                  if (profile && profile.imaging_center_id) {
                     const { data: center } = await this.supabase
                       .from("imaging_centers")
                       .select(
@@ -1530,6 +1330,9 @@ async function loadUserProgress() {
 
                     this.imagingCenter = center;
                   }
+
+                  // Setup real-time progress tracking
+                  this.setupProgressTracking();
                 }
 
                 // Update UI based on user data
@@ -1539,11 +1342,84 @@ async function loadUserProgress() {
               }
             },
 
+            // Setup real-time progress tracking
+            setupProgressTracking() {
+              if (!this.user || !this.user.id) return;
+
+              // Subscribe to user progress updates
+              this.progressChannel = this.supabase
+                .channel("user_progress_channel")
+                .on(
+                  "postgres_changes",
+                  {
+                    event: "UPDATE",
+                    schema: "public",
+                    table: "user_profiles",
+                    filter: `id=eq.${this.user.id}`,
+                  },
+                  (payload) => {
+                    console.log("Real-time progress update:", payload);
+
+                    const newProgress = payload.new.onboarding_progress;
+                    const newPSAStatus = payload.new.psa_signed;
+                    const newFacilitiesStatus =
+                      payload.new.facilities_configured;
+
+                    if (newProgress !== this.currentProgress) {
+                      this.currentProgress = newProgress;
+                      this.profile = Object.assign(
+                        {},
+                        this.profile,
+                        payload.new
+                      );
+
+                      // Dispatch progress update event
+                      window.dispatchEvent(
+                        new CustomEvent("userProgressUpdate", {
+                          detail: {
+                            onboarding_progress: newProgress,
+                            psa_signed: newPSAStatus,
+                            facilities_configured: newFacilitiesStatus,
+                            step_completed:
+                              newProgress === 25
+                                ? "facilities"
+                                : newProgress === 50
+                                  ? "psa"
+                                  : newProgress === 75
+                                    ? "caqh"
+                                    : newProgress === 100
+                                      ? "banking"
+                                      : "",
+                          },
+                        })
+                      );
+
+                      // Update UI immediately
+                      this.updateUI();
+                    }
+                  }
+                )
+                .subscribe();
+
+              console.log("✅ Real-time progress tracking setup complete");
+            },
+
             // Update UI elements based on user state
             updateUI() {
-              const hasCompletedPSA = this.profile?.psa_signed || false;
+              const hasCompletedPSA =
+                this.profile && this.profile.psa_signed
+                  ? this.profile.psa_signed
+                  : false;
               const onboardingProgress =
-                this.profile?.onboarding_progress || 40;
+                this.profile && this.profile.onboarding_progress
+                  ? this.profile.onboarding_progress
+                  : 0;
+
+              console.log("🎨 Updating UI:", {
+                hasCompletedPSA,
+                onboardingProgress,
+                profile: this.profile,
+              });
 
               // Update progress indicators
               const progressBars = document.querySelectorAll(
@@ -1560,6 +1436,14 @@ async function loadUserProgress() {
                 text.textContent = `${onboardingProgress}%`;
               });
 
+              // Update unlock premium card progress
+              const unlockProgress = document.querySelectorAll(
+                "[data-unlock-progress]"
+              );
+              unlockProgress.forEach((element) => {
+                element.textContent = `${onboardingProgress}% Complete`;
+              });
+
               // Update PSA banner visibility
               const psaBanner = document.getElementById("psa-banner");
               if (psaBanner && hasCompletedPSA) {
@@ -1588,10 +1472,7 @@ async function loadUserProgress() {
                 }
               });
 
-              console.log("UI updated:", {
-                hasCompletedPSA,
-                onboardingProgress,
-              });
+              console.log("✅ UI updated successfully");
             },
 
             // Complete PSA signing
@@ -1619,6 +1500,13 @@ async function loadUserProgress() {
                 return false;
               }
             },
+
+            // Clean up subscriptions
+            cleanup() {
+              if (this.progressChannel) {
+                this.supabase.removeChannel(this.progressChannel);
+              }
+            },
           };
 
           // Initialize user data
@@ -1628,15 +1516,103 @@ async function loadUserProgress() {
           window.USRadUser.supabase.auth.onAuthStateChange(
             async (event, session) => {
               console.log("Auth state changed:", event);
-              await window.USRadUser.loadUserData();
+
+              if (event === "SIGNED_OUT") {
+                window.USRadUser.cleanup();
+              } else if (event === "SIGNED_IN") {
+                await window.USRadUser.loadUserData();
+              }
             }
           );
+
+          // Handle logout buttons
+          const logoutButton = document.getElementById("logout-button");
+          if (logoutButton) {
+            logoutButton.addEventListener("click", async function () {
+              const button = this;
+              const logoutText = document.getElementById("logout-text");
+              const logoutLoading = document.getElementById("logout-loading");
+
+              // Show loading state
+              button.disabled = true;
+              if (logoutText) logoutText.style.display = "none";
+              if (logoutLoading) logoutLoading.style.display = "inline";
+
+              try {
+                // Sign out with Supabase
+                const { error } =
+                  await window.USRadUser.supabase.auth.signOut();
+
+                if (error) {
+                  throw error;
+                }
+
+                // Add success flag and redirect
+                sessionStorage.setItem("logout_success", "true");
+                window.location.href = "/";
+              } catch (error) {
+                console.error("Logout error:", error);
+                alert("Error signing out. Please try again.");
+
+                // Reset button state
+                button.disabled = false;
+                if (logoutText) logoutText.style.display = "inline";
+                if (logoutLoading) logoutLoading.style.display = "none";
+              }
+            });
+          }
+
+          // Handle sidebar logout button
+          const sidebarLogoutButton = document.getElementById(
+            "sidebar-logout-button"
+          );
+          if (sidebarLogoutButton) {
+            sidebarLogoutButton.addEventListener("click", async function () {
+              const button = this;
+              const sidebarLogoutText = document.getElementById(
+                "sidebar-logout-text"
+              );
+              const sidebarLogoutLoading = document.getElementById(
+                "sidebar-logout-loading"
+              );
+
+              // Show loading state
+              button.disabled = true;
+              if (sidebarLogoutText) sidebarLogoutText.classList.add("hidden");
+              if (sidebarLogoutLoading)
+                sidebarLogoutLoading.classList.remove("hidden");
+
+              try {
+                // Sign out with Supabase
+                const { error } =
+                  await window.USRadUser.supabase.auth.signOut();
+
+                if (error) {
+                  throw error;
+                }
+
+                // Add success flag and redirect
+                sessionStorage.setItem("logout_success", "true");
+                window.location.href = "/";
+              } catch (error) {
+                console.error("Sidebar logout error:", error);
+                alert("Error signing out. Please try again.");
+
+                // Reset button state
+                button.disabled = false;
+                if (sidebarLogoutText)
+                  sidebarLogoutText.classList.remove("hidden");
+                if (sidebarLogoutLoading)
+                  sidebarLogoutLoading.classList.add("hidden");
+              }
+            });
+          }
         } catch (error) {
           console.error("Failed to initialize user management:", error);
         }
       });
 
-      // Listen for facility completion updates
+      // Listen for facility completion updates from other components
       window.addEventListener("userProgressUpdate", function (event) {
         const { facilities_configured, onboarding_progress, step_completed } =
           event.detail;
@@ -1653,79 +1629,16 @@ async function loadUserProgress() {
               facilities_configured;
             window.USRadUser.profile.onboarding_progress = onboarding_progress;
           }
-        }
-
-        // Update progress bars
-        const progressBars = document.querySelectorAll("[data-progress-bar]");
-        progressBars.forEach((bar) => {
-          bar.style.width = `${onboarding_progress}%`;
-        });
-
-        // Update progress text
-        const progressTexts = document.querySelectorAll("[data-progress-text]");
-        progressTexts.forEach((text) => {
-          text.textContent = `${onboarding_progress}%`;
-        });
-
-        // UNLOCK PSA ELEMENTS when facilities are configured
-        if (facilities_configured) {
-          const psaElements = document.querySelectorAll("[data-psa-locked]");
-          psaElements.forEach((el) => {
-            el.classList.remove("opacity-50", "pointer-events-none");
-            el.classList.add("cursor-pointer");
-
-            // Change "Locked" to "Ready"
-            const lockedText = el.querySelector("[data-locked-text]");
-            if (lockedText) {
-              lockedText.textContent = "Ready";
-              lockedText.className = lockedText.className.replace(
-                "text-gray-500",
-                "text-green-600"
-              );
-            }
 
-            // Add completion checkmark
-            const checkmark = el.querySelector("[data-completion-check]");
-            if (checkmark) {
-              checkmark.classList.remove("hidden");
-            }
-          });
-
-          // Update PSA banner
-          const psaBanner = document.getElementById("psa-banner");
-          if (psaBanner) {
-            psaBanner.innerHTML = `
-        <strong>Ready to sign your PSA!</strong>
-        <a href="/dashboard/onboarding/psa" style="margin-left: 1rem; background: #10b981; color: white; padding: 0.5rem 1rem; border-radius: 6px; text-decoration: none;">
-          Sign PSA Now
-        </a>
-      `;
-            psaBanner.style.backgroundColor = "#d1fae5";
-            psaBanner.style.color = "#065f46";
-          }
+          // Update UI
+          window.USRadUser.updateUI();
         }
       });
-    </script>
-    <script>
-      window.addEventListener("userProgressUpdate", function (event) {
-        const detail = event.detail || {};
-        const isFacilitiesComplete =
-          detail.facilities_configured === true ||
-          detail.step_completed === "facilities";
-
-        if (isFacilitiesComplete) {
-          const psaCard = document.querySelector("[data-psa-locked]");
-          if (psaCard) {
-            psaCard.classList.remove("opacity-50", "pointer-events-none");
-            psaCard.removeAttribute("data-psa-locked");
-
-            // Toggle locked text and show checkmark
-            const lockedText = psaCard.querySelector("[data-locked-text]");
-            const checkmark = psaCard.querySelector("[data-completion-check]");
-
-            if (lockedText) lockedText.classList.add("hidden");
-            if (checkmark) checkmark.classList.remove("hidden");
-          }
+
+      // Cleanup on page unload
+      window.addEventListener("beforeunload", () => {
+        if (window.USRadUser) {
+          window.USRadUser.cleanup();
         }
       });
     </script>
