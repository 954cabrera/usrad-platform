---
// src/components/dashboard/DashboardLayout.astro
export interface Props {
  title: string;
  user?: any;
  imagingCenter?: any;
}
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const { title, user, imagingCenter } = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <meta name="supabase-url" content={supabaseUrl} />
    <meta name="supabase-anon-key" content={supabaseAnonKey} />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} | USRad Dashboard</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Manrope:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Manrope", sans-serif;
        overflow-x: hidden;
        background: linear-gradient(135deg, #f5f9ff 0%, #ffffff 100%);
      }

      /* USRad Colors */
      .usrad-navy {
        color: #003087 !important;
      }
      .usrad-gold {
        color: #cc9933 !important;
      }
      .bg-usrad-navy {
        background-color: #003087 !important;
      }
      .bg-usrad-gold {
        background-color: #cc9933 !important;
      }

      .usrad-gradient-navy {
        background: linear-gradient(
          135deg,
          #003087 0%,
          #001a4d 100%
        ) !important;
      }

      .usrad-gradient-gold {
        background: linear-gradient(
          135deg,
          #cc9933 0%,
          #e6b84d 100%
        ) !important;
      }

      /* Enhanced Animations */
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes slideUp {
        from {
          transform: translateY(20px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes shimmer {
        0% {
          background-position: -200px 0;
        }
        100% {
          background-position: calc(200px + 100%) 0;
        }
      }

      @keyframes glow {
        0%,
        100% {
          box-shadow: 0 0 20px rgba(204, 153, 51, 0.3);
        }
        50% {
          box-shadow: 0 0 30px rgba(204, 153, 51, 0.6);
        }
      }

      @keyframes float {
        0%,
        100% {
          transform: translateY(0px);
        }
        50% {
          transform: translateY(-8px);
        }
      }

      .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
      }
      .animate-slide-up {
        animation: slideUp 0.3s ease-out;
      }
      .animate-shimmer {
        background: linear-gradient(
          90deg,
          #cc9933 25%,
          #e6b84d 50%,
          #cc9933 75%
        );
        background-size: 200px 100%;
        animation: shimmer 2s ease-in-out infinite;
      }
      .animate-glow {
        animation: glow 3s ease-in-out infinite;
      }
      .animate-float {
        animation: float 6s ease-in-out infinite;
      }

      /* Sidebar */
      .sidebar-transition {
        transition:
          transform 0.3s ease-in-out,
          width 0.3s ease-in-out;
      }

      /* Fix sidebar scrolling */
      #sidebar {
        overflow-y: auto;
        overflow-x: hidden;
      }

      #sidebar nav {
        overflow-y: auto;
        max-height: calc(100vh - 200px);
      }

      .nav-link {
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-radius: 12px;
        font-size: 14px;
        font-weight: 500;
        text-decoration: none;
        color: white;
      }

      .nav-link::before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0;
        background: linear-gradient(
          90deg,
          rgba(204, 153, 51, 0.1),
          rgba(204, 153, 51, 0.2)
        );
        transition: width 0.3s ease;
        z-index: 0;
      }

      .nav-link:hover::before,
      .nav-link.active::before {
        width: 100%;
      }

      .nav-link:hover {
        background: rgba(204, 153, 51, 0.1);
        border-left: 4px solid #cc9933;
        transform: translateX(4px);
      }

      .nav-link.active {
        background: rgba(204, 153, 51, 0.15);
        border-left: 4px solid #cc9933;
        color: #cc9933;
        font-weight: 600;
      }

      .nav-link.locked {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .nav-link.locked:hover {
        transform: none;
        background: rgba(255, 255, 255, 0.05);
        border-left: none;
      }

      .nav-link > * {
        position: relative;
        z-index: 1;
      }

      /* Premium Card Styles */
      .unlock-premium-card {
        background: linear-gradient(
          135deg,
          rgba(204, 153, 51, 0.1) 0%,
          rgba(204, 153, 51, 0.2) 100%
        );
        border: 2px solid rgba(204, 153, 51, 0.3);
        border-radius: 16px;
        padding: 16px;
        margin: 16px;
        position: relative;
        overflow: hidden;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .unlock-premium-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(204, 153, 51, 0.4);
        border-color: rgba(204, 153, 51, 0.6);
      }

      .unlock-premium-card::before {
        content: "";
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
          45deg,
          transparent,
          rgba(255, 255, 255, 0.1),
          transparent
        );
        transform: rotate(45deg);
        transition: all 0.6s ease;
        opacity: 0;
      }

      .unlock-premium-card:hover::before {
        animation: shimmer 1.5s ease-in-out;
        opacity: 1;
      }

      .network-tools-section {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        margin: 16px;
        padding: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      .network-tool-item {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-radius: 10px;
        transition: all 0.3s ease;
        cursor: pointer;
        margin-bottom: 8px;
        position: relative;
      }

      .network-tool-item:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateX(4px);
      }

      .network-tool-item.locked {
        opacity: 0.5;
        cursor: not-allowed;
      }

      .network-tool-item.locked:hover {
        background: none;
        transform: none;
      }

      .premium-badge {
        background: linear-gradient(135deg, #cc9933, #e6b84d);
        color: #003087;
        font-size: 10px;
        font-weight: bold;
        padding: 2px 6px;
        border-radius: 6px;
        margin-left: auto;
      }

      .lock-icon {
        color: #facc15 !important; /* Yellow-400 */
        margin-left: auto;
        width: 16px;
        height: 16px;
      }

      .locked[title]:hover::after {
        content: attr(title);
        position: absolute;
        left: 100%;
        top: 50%;
        transform: translateY(-50%);
        background: #111827;
        color: white;
        padding: 4px 8px;
        font-size: 12px;
        border-radius: 4px;
        white-space: nowrap;
        margin-left: 8px;
        z-index: 100;
        pointer-events: none;
        transition: opacity 0.1s ease-in;
        opacity: 1;
      }

      .locked[title]:not(:hover)::after {
        opacity: 0;
        transition: opacity 0.1s ease-out;
      }

      /* Mobile Menu */
      .mobile-menu-open {
        transform: translateX(0);
      }

      .mobile-menu-closed {
        transform: translateX(-100%);
      }

      /* Progress Indicator */
      .progress-ring {
        width: 60px;
        height: 60px;
        position: relative;
      }

      .progress-ring-circle {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        border: 4px solid rgba(255, 255, 255, 0.2);
        border-top: 4px solid #cc9933;
        animation: spin 3s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      /* Responsive utilities */
      .hidden {
        display: none;
      }
      .flex {
        display: flex;
      }
      .items-center {
        align-items: center;
      }
      .justify-between {
        justify-content: space-between;
      }
      .justify-center {
        justify-content: center;
      }
      .space-x-2 > * + * {
        margin-left: 8px;
      }
      .space-x-3 > * + * {
        margin-left: 12px;
      }
      .space-x-4 > * + * {
        margin-left: 16px;
      }
      .space-y-2 > * + * {
        margin-top: 8px;
      }
      .w-full {
        width: 100%;
      }
      .h-screen {
        height: 100vh;
      }
      .min-h-screen {
        min-height: 100vh;
      }
      .fixed {
        position: fixed;
      }
      .relative {
        position: relative;
      }
      .absolute {
        position: absolute;
      }
      .inset-0 {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
      .top-0 {
        top: 0;
      }
      .left-0 {
        left: 0;
      }
      .z-40 {
        z-index: 40;
      }
      .z-50 {
        z-index: 50;
      }
      .z-30 {
        z-index: 30;
      }
      .p-4 {
        padding: 16px;
      }
      .p-6 {
        padding: 24px;
      }
      .px-6 {
        padding-left: 24px;
        padding-right: 24px;
      }
      .py-4 {
        padding-top: 16px;
        padding-bottom: 16px;
      }
      .px-4 {
        padding-left: 16px;
        padding-right: 16px;
      }
      .py-2 {
        padding-top: 8px;
        padding-bottom: 8px;
      }
      .px-3 {
        padding-left: 12px;
        padding-right: 12px;
      }
      .py-3 {
        padding-top: 12px;
        padding-bottom: 12px;
      }
      .mb-2 {
        margin-bottom: 8px;
      }
      .mb-4 {
        margin-bottom: 16px;
      }
      .mb-6 {
        margin-bottom: 24px;
      }
      .mr-3 {
        margin-right: 12px;
      }
      .ml-auto {
        margin-left: auto;
      }
      .mt-6 {
        margin-top: 24px;
      }
      .text-white {
        color: white;
      }
      .text-gray-600 {
        color: #6b7280;
      }
      .text-gray-700 {
        color: #374151;
      }
      .text-red-300 {
        color: #fca5a5;
      }
      .text-blue-200 {
        color: #bfdbfe;
      }
      .text-green-400 {
        color: #4ade80;
      }
      .bg-white {
        background-color: white;
      }
      .bg-gray-50 {
        background-color: #f9fafb;
      }
      .bg-black {
        background-color: black;
      }
      .bg-red-600 {
        background-color: #dc2626;
      }
      .bg-red-900 {
        background-color: #7f1d1d;
      }
      .bg-opacity-50 {
        --tw-bg-opacity: 0.5;
      }
      .rounded-full {
        border-radius: 9999px;
      }
      .rounded-lg {
        border-radius: 8px;
      }
      .rounded-xl {
        border-radius: 12px;
      }
      .border-b {
        border-bottom-width: 1px;
      }
      .border-t {
        border-top-width: 1px;
      }
      .border-blue-800 {
        border-color: #1e40af;
      }
      .border-gray-200 {
        border-color: #e5e7eb;
      }
      .shadow-lg {
        box-shadow:
          0 10px 15px -3px rgba(0, 0, 0, 0.1),
          0 4px 6px -2px rgba(0, 0, 0, 0.05);
      }
      .shadow-2xl {
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      }
      .shadow-sm {
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      }
      .hover\:bg-gray-100:hover {
        background-color: #f3f4f6;
      }
      .hover\:bg-red-900:hover {
        background-color: #7f1d1d;
      }
      .hover\:text-red-200:hover {
        color: #fecaca;
      }
      .transition-colors {
        transition-property: color, background-color, border-color;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
      }
      .transition-all {
        transition-property: all;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
      }
      .duration-200 {
        transition-duration: 200ms;
      }
      .duration-300 {
        transition-duration: 300ms;
      }
      .cursor-pointer {
        cursor: pointer;
      }
      .font-bold {
        font-weight: 700;
      }
      .font-semibold {
        font-weight: 600;
      }
      .font-medium {
        font-weight: 500;
      }
      .text-xs {
        font-size: 12px;
        line-height: 16px;
      }
      .text-sm {
        font-size: 14px;
        line-height: 20px;
      }
      .text-base {
        font-size: 16px;
        line-height: 24px;
      }
      .text-lg {
        font-size: 18px;
        line-height: 28px;
      }
      .text-xl {
        font-size: 20px;
        line-height: 28px;
      }
      .text-2xl {
        font-size: 24px;
        line-height: 32px;
      }
      .uppercase {
        text-transform: uppercase;
      }
      .tracking-wide {
        letter-spacing: 0.025em;
      }
      .w-5 {
        width: 20px;
      }
      .h-5 {
        height: 20px;
      }
      .w-6 {
        width: 24px;
      }
      .h-6 {
        height: 24px;
      }
      .w-8 {
        width: 32px;
      }
      .h-8 {
        height: 32px;
      }
      .w-10 {
        width: 40px;
      }
      .h-10 {
        height: 40px;
      }
      .w-12 {
        width: 48px;
      }
      .h-12 {
        height: 48px;
      }
      .w-64 {
        width: 256px;
      }
      .w-72 {
        width: 288px;
      }
      .min-w-0 {
        min-width: 0;
      }
      .truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      .backdrop-blur-md {
        backdrop-filter: blur(12px);
      }
      .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
      }

      @keyframes pulse {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
      }

      /* Large screens */
      @media (min-width: 1024px) {
        .lg\:hidden {
          display: none;
        }
        .lg\:mobile-menu-open {
          transform: translateX(0);
        }
        .lg\:translate-x-0 {
          transform: translateX(0);
        }
        .lg\:ml-72 {
          margin-left: 288px;
        }
      }

      /* Medium screens */
      @media (min-width: 768px) {
        .md\:inline {
          display: inline;
        }
      }

      /* Small screens */
      @media (min-width: 640px) {
        .sm\:block {
          display: block;
        }
      }
    </style>
  </head>

  <body class="bg-gradient-to-br from-usrad-light to-white">
    <!-- PSA Banner at top level -->
    {
      !user?.hasCompletedPSA && !Astro.cookies.get("hide_psa_banner") && (
        <div
          id="psa-banner"
          style="background-color: #fff8dc; color: #111827; padding: 1rem; text-align: center; position: relative; z-index: 60;"
        >
          <strong>
            Complete your Provider Service Agreement to unlock full access.
          </strong>
          <a
            href="/dashboard/onboarding"
            style="margin-left: 1rem; background: #2563eb; color: white; padding: 0.5rem 1rem; border-radius: 6px; text-decoration: none;"
          >
            Finish Setup
          </a>
          <button
            onclick="document.querySelector('#psa-banner').remove(); document.cookie = 'hide_psa_banner=true; path=/'"
            style="position: absolute; top: 8px; right: 12px; background: none; border: none; font-size: 20px; cursor: pointer;"
          >
            ×
          </button>
        </div>
      )
    }

    <!-- Mobile Menu Overlay -->
    <div
      id="mobile-overlay"
      class="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden hidden"
    >
    </div>

    <!-- Enhanced Sidebar with Progressive Disclosure -->
    <aside
      id="sidebar"
      class={`fixed top-0 left-0 z-50 w-72 h-screen usrad-gradient-navy text-white sidebar-transition mobile-menu-closed lg:mobile-menu-open lg:translate-x-0 shadow-2xl ${!user?.hasCompletedPSA ? "pt-12" : ""}`}
    >
      <!-- Logo Section -->
      <div
        class="flex items-center justify-between p-6 border-b border-blue-800"
      >
        <div class="flex items-center space-x-3">
          <img
            src="/logo/usrad-logo.png"
            alt="USRad Logo"
            class="w-10 h-10 rounded-lg animate-float"
          />
          <div>
            <h1 class="text-xl font-bold text-white">USRad</h1>
            <p class="text-xs text-blue-200">Imaging Dashboard</p>
          </div>
        </div>
        <button
          id="close-sidebar"
          class="lg:hidden text-white hover:text-usrad-gold transition-colors p-2"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Enhanced User Info with Progress -->
      {
        user && (
          <div class="p-6 border-b border-blue-800 bg-gradient-to-r from-blue-800/20 to-transparent">
            <div class="flex items-center space-x-4">
              <div class="relative">
                <div class="w-12 h-12 usrad-gradient-gold rounded-full flex items-center justify-center font-bold text-usrad-navy text-lg shadow-lg animate-glow">
                  {user.firstName?.[0] || user.email[0].toUpperCase()}
                </div>
                <div class="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white animate-pulse" />
              </div>
              <div class="flex-1 min-w-0">
                <p class="font-semibold text-white truncate">
                  {user.firstName && user.lastName
                    ? `${user.firstName} ${user.lastName}`
                    : user.email}
                </p>
                {imagingCenter && (
                  <p class="text-sm text-blue-200 truncate">
                    {imagingCenter.name}
                  </p>
                )}
                <div class="flex items-center mt-2">
                  <div class="flex-1 bg-blue-800 rounded-full h-2">
                    <div
                      class="bg-usrad-gold h-2 rounded-full transition-all duration-1000"
                      style="width: 75%"
                      data-progress-bar
                    />
                  </div>
                  <span class="text-xs text-blue-200 ml-2" data-progress-text>
                    75%
                  </span>
                </div>
              </div>
            </div>
          </div>
        )
      }

      <!-- Unlock Premium Card -->
      <div
        class="unlock-premium-card animate-float"
        onclick="window.location.href='/dashboard/onboarding'"
        style="cursor: pointer;"
      >
        <div class="flex items-center space-x-3 mb-3">
          <div
            class="w-8 h-8 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-lg flex items-center justify-center"
          >
            <svg
              class="w-5 h-5 text-white"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M5 3l14 9-14 9V3z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-white font-bold text-sm">Unlock Premium</h3>
            <p class="text-blue-200 text-xs">Complete PSA for full access</p>
          </div>
        </div>
        <div class="flex items-center justify-between">
          <div class="flex space-x-1">
            <div class="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
            <div
              class="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"
              style="animation-delay: 0.2s"
            >
            </div>
            <div
              class="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"
              style="animation-delay: 0.4s"
            >
            </div>
          </div>
          <span class="text-xs text-yellow-300 font-semibold">75% Complete</span
          >
        </div>
      </div>

      <!-- Navigation -->
      <nav class="flex-1 px-4 py-2 space-y-2">
        {
          [
            {
              href: "/dashboard",
              icon: "🏠",
              label: "Dashboard",
              unlocked: true,
            },
            {
              href: "/dashboard/appointments",
              icon: "📅",
              label: "Appointments",
              unlocked: true,
            },
            {
              href: "/dashboard/patients",
              icon: "👥",
              label: "Patients",
              unlocked: true,
            },
            {
              href: "/dashboard/settings",
              icon: "⚙️",
              label: "Settings",
              unlocked: true,
            },
            // Divider marker
            { divider: true },
            {
              href: "/dashboard/analytics",
              icon: "📊",
              label: "Analytics",
              unlocked: false,
            },
            {
              href: "/dashboard/reports",
              icon: "📑",
              label: "Reports",
              unlocked: false,
            },
            {
              href: "/dashboard/training",
              icon: "📘",
              label: "Training Center",
              unlocked: false,
            },
            {
              href: "/dashboard/resources",
              icon: "🧰",
              label: "Resources",
              unlocked: false,
            },
          ].map((item) => {
            if (item.divider) {
              return (
                item.divider &&
                !user?.hasCompletedPSA && (
                  <hr class="my-4 border-blue-900 opacity-20" />
                )
              );
            }
            const { href, icon, label, unlocked } = item;
            const isLocked = !unlocked && !user?.hasCompletedPSA;
            return (
              <a
                href={href}
                class={`nav-link ${isLocked ? "locked" : ""} ${currentPath.startsWith(href) ? "active" : ""}`}
                title={isLocked ? "Complete PSA to unlock this feature" : ""}
                onclick={
                  isLocked ? "event.preventDefault(); return false;" : ""
                }
              >
                <div class="usrad-gradient-navy p-2 rounded-lg mr-3">
                  <span style="font-size: 20px;">{icon}</span>
                </div>
                <span>{label}</span>
                {href === "/dashboard/appointments" && (
                  <div class="ml-auto bg-usrad-gold text-usrad-navy text-xs font-bold px-2 py-1 rounded-full">
                    12
                  </div>
                )}
                {isLocked && (
                  <svg
                    class="lock-icon ml-auto"
                    title="Complete PSA to unlock"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                    />
                  </svg>
                )}
              </a>
            );
          })
        }
      </nav>

      <!-- Logout Section -->
      <div
        class="p-4 border-t border-blue-800 bg-gradient-to-r from-red-900/10 to-transparent"
      >
        <button
          id="sidebar-logout-button"
          type="button"
          class="w-full flex items-center px-4 py-3 text-sm font-medium text-red-300 hover:text-red-200 hover:bg-red-900 rounded-xl transition-all duration-200 disabled:opacity-50"
        >
          <div class="p-2 rounded-lg mr-3 bg-red-900/30">
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3v1"
              ></path>
            </svg>
          </div>
          <span id="sidebar-logout-text">Sign Out</span>
          <span id="sidebar-logout-loading" class="hidden">Signing out...</span>
        </button>
      </div>
    </aside>

    <!-- Main Content -->
    <div class="lg:ml-72 min-h-screen">
      <!-- Top Header -->
      <header
        class="bg-white backdrop-blur-md shadow-sm border-b border-gray-200 px-6 py-4 relative z-30"
      >
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <button
              id="menu-toggle"
              class="lg:hidden text-gray-600 hover:bg-gray-100 p-2 rounded-lg transition-colors"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
            </button>
            <div>
              <h1 class="text-2xl font-bold usrad-navy">{title}</h1>
              <p class="text-sm text-gray-600">
                Welcome back, {user?.firstName || "User"}
              </p>
            </div>
          </div>

          <div class="flex items-center space-x-4">
            <!-- Quick Actions -->
            <button
              class="bg-usrad-navy text-white px-4 py-2 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 text-sm font-semibold"
            >
              + New Patient
            </button>

            <!-- Notifications -->
            <button
              class="relative text-gray-600 hover:bg-gray-100 p-2 rounded-lg transition-colors"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"
                ></path>
              </svg>
              <span
                class="absolute -top-1 -right-1 bg-red-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center animate-pulse"
                >3</span
              >
            </button>

            <!-- Profile & Logout -->
            <div class="flex items-center space-x-3">
              <!-- Profile Info -->
              <div
                class="flex items-center space-x-3 bg-gray-50 rounded-lg p-2"
              >
                <div
                  class="w-8 h-8 usrad-gradient-gold rounded-lg flex items-center justify-center font-bold text-usrad-navy text-sm"
                >
                  {user?.firstName?.[0] || user?.email[0].toUpperCase() || "U"}
                </div>
                <span class="text-sm font-medium text-gray-700 sm:block">
                  {user?.firstName || "User"}
                </span>
              </div>

              <!-- Logout Button -->
              <button
                id="logout-button"
                type="button"
                class="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200 disabled:opacity-50"
                title="Sign Out"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013 3v1"
                  ></path>
                </svg>
                <span class="md:inline" id="logout-text">Sign Out</span>
                <span
                  class="md:inline"
                  id="logout-loading"
                  style="display: none;">Signing out...</span
                >
              </button>
            </div>
          </div>
        </div>
      </header>

      <!-- Page Content -->
      <main class="p-6 animate-fade-in">
        <slot />
      </main>
    </div>

    <script>
      // Enhanced Progressive Disclosure Functionality
      function handlePremiumUnlock() {
        // Add shimmer effect
        const card = document.querySelector(".unlock-premium-card");
        card.style.background =
          "linear-gradient(135deg, rgba(204, 153, 51, 0.2) 0%, rgba(204, 153, 51, 0.4) 100%)";

        setTimeout(() => {
          window.location.href = "/dashboard/onboarding/psa";
        }, 300);
      }

      function handleLockedFeature(feature) {
        event.preventDefault();

        // Create elegant modal notification
        const modal = document.createElement("div");
        modal.className =
          "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4";
        modal.innerHTML = `
          <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6 transform transition-all duration-300">
            <div class="text-center">
              <div class="w-16 h-16 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-bold text-gray-900 mb-2">Premium Feature</h3>
              <p class="text-gray-600 mb-6">Complete your PSA to unlock ${feature} and other premium features.</p>
              <div class="flex space-x-3">
                <button onclick="this.closest('.fixed').remove()" class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                  Maybe Later
                </button>
                <button onclick="window.location.href='/dashboard/onboarding/psa'" class="flex-1 px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:shadow-lg transition-all duration-300">
                  Complete PSA
                </button>
              </div>
            </div>
          </div>
        `;

        document.body.appendChild(modal);

        // Auto-remove after 10 seconds
        setTimeout(() => {
          if (modal.parentNode) {
            modal.remove();
          }
        }, 10000);
      }

      function handleNetworkTool(tool) {
        const toolElement = event.currentTarget;
        const isLocked = toolElement.classList.contains("locked");

        if (isLocked) {
          handleLockedFeature(tool);
        } else {
          // Tool is available - add success feedback
          toolElement.style.background = "rgba(34, 197, 94, 0.2)";
          setTimeout(() => {
            toolElement.style.background = "";
            // Navigate to tool (implement as needed)
            console.log(`Navigating to ${tool} tool`);
          }, 200);
        }
      }

      // Mobile menu functionality
      const menuToggle = document.getElementById("menu-toggle");
      const closeSidebar = document.getElementById("close-sidebar");
      const sidebar = document.getElementById("sidebar");
      const overlay = document.getElementById("mobile-overlay");

      function openSidebar() {
        if (sidebar && overlay) {
          sidebar.classList.remove("mobile-menu-closed");
          sidebar.classList.add("mobile-menu-open");
          overlay.classList.remove("hidden");
        }
      }

      function closeSidebarFn() {
        if (sidebar && overlay) {
          sidebar.classList.remove("mobile-menu-open");
          sidebar.classList.add("mobile-menu-closed");
          overlay.classList.add("hidden");
        }
      }

      if (menuToggle) menuToggle.addEventListener("click", openSidebar);
      if (closeSidebar) closeSidebar.addEventListener("click", closeSidebarFn);
      if (overlay) overlay.addEventListener("click", closeSidebarFn);

      // Close sidebar on window resize if desktop
      window.addEventListener("resize", () => {
        if (window.innerWidth >= 1024) {
          closeSidebarFn();
        }
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Get Supabase config from meta tags
        const supabaseUrl = document.querySelector(
          'meta[name="supabase-url"]'
        )?.content;
        const supabaseAnonKey = document.querySelector(
          'meta[name="supabase-anon-key"]'
        )?.content;

        if (!supabaseUrl || !supabaseAnonKey) {
          console.error("Missing Supabase configuration in dashboard");
          return;
        }

        // Load Supabase and handle logout
        import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm")
          .then(({ createClient }) => {
            const supabaseClient = createClient(supabaseUrl, supabaseAnonKey);

            // Handle logout button click
            const logoutButton = document.getElementById("logout-button");
            if (logoutButton) {
              logoutButton.addEventListener("click", async function () {
                const button = this;
                const logoutText = document.getElementById("logout-text");
                const logoutLoading = document.getElementById("logout-loading");

                // Show loading state
                button.disabled = true;
                if (logoutText) logoutText.classList.add("hidden");
                if (logoutLoading) logoutLoading.classList.remove("hidden");

                try {
                  // Sign out with Supabase directly
                  const { error } = await supabaseClient.auth.signOut();

                  if (error) {
                    throw error;
                  }

                  // Add success flag and redirect
                  sessionStorage.setItem("logout_success", "true");
                  window.location.href = "/";
                } catch (error) {
                  console.error("Logout error:", error);
                  alert("Error signing out. Please try again.");

                  // Reset button state
                  button.disabled = false;
                  if (logoutText) logoutText.classList.remove("hidden");
                  if (logoutLoading) logoutLoading.classList.add("hidden");
                }
              });
            }

            // Handle sidebar logout button click
            const sidebarLogoutButton = document.getElementById(
              "sidebar-logout-button"
            );
            if (sidebarLogoutButton) {
              sidebarLogoutButton.addEventListener("click", async function () {
                const button = this;
                const sidebarLogoutText = document.getElementById(
                  "sidebar-logout-text"
                );
                const sidebarLogoutLoading = document.getElementById(
                  "sidebar-logout-loading"
                );

                // Show loading state
                button.disabled = true;
                if (sidebarLogoutText)
                  sidebarLogoutText.classList.add("hidden");
                if (sidebarLogoutLoading)
                  sidebarLogoutLoading.classList.remove("hidden");

                try {
                  // Sign out with Supabase directly
                  const { error } = await supabaseClient.auth.signOut();

                  if (error) {
                    throw error;
                  }

                  // Add success flag and redirect
                  sessionStorage.setItem("logout_success", "true");
                  window.location.href = "/";
                } catch (error) {
                  console.error("Sidebar logout error:", error);
                  alert("Error signing out. Please try again.");

                  // Reset button state
                  button.disabled = false;
                  if (sidebarLogoutText)
                    sidebarLogoutText.classList.remove("hidden");
                  if (sidebarLogoutLoading)
                    sidebarLogoutLoading.classList.add("hidden");
                }
              });
            }
          })
          .catch((error) => {
            console.error("Failed to load Supabase for logout:", error);
          });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", async function () {
        // Get Supabase config
        const supabaseUrl = document.querySelector(
          'meta[name="supabase-url"]'
        )?.content;
        const supabaseAnonKey = document.querySelector(
          'meta[name="supabase-anon-key"]'
        )?.content;

        if (!supabaseUrl || !supabaseAnonKey) {
          console.error("Missing Supabase configuration");
          return;
        }

        try {
          // Load Supabase
          const { createClient } = await import(
            "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm"
          );
          const supabase = createClient(supabaseUrl, supabaseAnonKey);

          // Initialize user management
          window.USRadUser = {
            supabase: supabase,
            user: null,
            profile: null,
            imagingCenter: null,

            // Load user data
            async loadUserData() {
              try {
                const {
                  data: { user },
                } = await this.supabase.auth.getUser();
                this.user = user;

                if (user) {
                  // Get user profile
                  const { data: profile } = await this.supabase
                    .from("user_profiles")
                    .select("*")
                    .eq("id", user.id)
                    .single();

                  this.profile = profile;

                  // Get imaging center if profile has one
                  if (profile?.imaging_center_id) {
                    const { data: center } = await this.supabase
                      .from("imaging_centers")
                      .select(
                        `
                        id, facility_name, street_1, city, state, 
                        zip_code, phone_number, modality, status, onboarding_status
                      `
                      )
                      .eq("id", profile.imaging_center_id)
                      .single();

                    this.imagingCenter = center;
                  }
                }

                // Update UI based on user data
                this.updateUI();
              } catch (error) {
                console.error("Error loading user data:", error);
              }
            },

            // Update UI elements based on user state
            updateUI() {
              const hasCompletedPSA = this.profile?.psa_signed || false;
              const onboardingProgress =
                this.profile?.onboarding_progress || 40;

              // Update progress indicators
              const progressBars = document.querySelectorAll(
                "[data-progress-bar]"
              );
              progressBars.forEach((bar) => {
                bar.style.width = `${onboardingProgress}%`;
              });

              const progressTexts = document.querySelectorAll(
                "[data-progress-text]"
              );
              progressTexts.forEach((text) => {
                text.textContent = `${onboardingProgress}%`;
              });

              // Update PSA banner visibility
              const psaBanner = document.getElementById("psa-banner");
              if (psaBanner && hasCompletedPSA) {
                psaBanner.style.display = "none";
              }

              // Update unlock premium card
              const unlockCard = document.querySelector(".unlock-premium-card");
              if (unlockCard && hasCompletedPSA) {
                unlockCard.style.display = "none";
              }

              // Update locked navigation items
              const lockedItems = document.querySelectorAll(".nav-link.locked");
              lockedItems.forEach((item) => {
                if (hasCompletedPSA) {
                  item.classList.remove("locked");
                  item.removeAttribute("onclick");
                  item.removeAttribute("title");

                  // Remove lock icon
                  const lockIcon = item.querySelector(".lock-icon");
                  if (lockIcon) {
                    lockIcon.remove();
                  }
                }
              });

              console.log("UI updated:", {
                hasCompletedPSA,
                onboardingProgress,
              });
            },

            // Complete PSA signing
            async completePSA(documentUrl = null, submissionId = null) {
              if (!this.user) return false;

              try {
                const { error } = await this.supabase.rpc(
                  "complete_psa_signing",
                  {
                    user_uuid: this.user.id,
                    document_url: documentUrl,
                    submission_id: submissionId,
                  }
                );

                if (error) throw error;

                // Reload user data to get updated status
                await this.loadUserData();

                return true;
              } catch (error) {
                console.error("Error completing PSA:", error);
                return false;
              }
            },
          };

          // Initialize user data
          await window.USRadUser.loadUserData();

          // Listen for auth state changes
          window.USRadUser.supabase.auth.onAuthStateChange(
            async (event, session) => {
              console.log("Auth state changed:", event);
              await window.USRadUser.loadUserData();
            }
          );
        } catch (error) {
          console.error("Failed to initialize user management:", error);
        }
      });
    </script>
  </body>
</html>
