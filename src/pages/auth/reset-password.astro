---
// /src/pages/auth/reset-password.astro
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="supabase-url" content={supabaseUrl} />
    <meta name="supabase-anon-key" content={supabaseAnonKey} />
    <title>Reset Password | USRad</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      html,
      body {
        margin: 0;
        padding: 0;
        height: 100%;
        font-family:
          "Inter",
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          sans-serif;
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        animation: fadeIn 0.6s ease;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .reset-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
      }

      .reset-card {
        width: 100%;
        max-width: 420px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .reset-header {
        background: linear-gradient(135deg, #003087 0%, #001a4d 100%);
        padding: 2rem;
        text-align: center;
        color: white;
      }

      .reset-logo {
        max-width: 140px;
        margin-bottom: 1rem;
        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
      }

      .reset-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
        letter-spacing: -0.02em;
      }

      .reset-subtitle {
        font-size: 0.9rem;
        opacity: 0.9;
        margin: 0;
        line-height: 1.5;
      }

      .reset-form {
        padding: 2rem;
      }

      .input-group {
        margin-bottom: 1.25rem;
      }

      .input-label {
        display: block;
        font-size: 0.9rem;
        font-weight: 500;
        color: #374151;
        margin-bottom: 0.5rem;
      }

      .asterisk {
        color: #e6c378;
        margin-left: 2px;
      }

      .input-wrapper {
        position: relative;
      }

      .form-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1.5px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s ease;
        background: #ffffff;
        font-family: "Inter", sans-serif;
      }

      .form-input:focus {
        outline: none;
        border-color: #003087;
        box-shadow: 0 0 0 3px rgba(0, 48, 135, 0.08);
      }

      .password-requirements {
        margin-top: 0.5rem;
        font-size: 0.8rem;
        color: #64748b;
        line-height: 1.4;
      }

      .requirement {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
      }

      .requirement.valid {
        color: #16a34a;
      }

      .requirement-icon {
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background: #e2e8f0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        color: white;
      }

      .requirement.valid .requirement-icon {
        background: #16a34a;
      }

      .reset-button {
        width: 100%;
        padding: 0.875rem 1rem;
        background: #003087;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 1.5rem;
        font-family: "Inter", sans-serif;
      }

      .reset-button:hover:not(:disabled) {
        background: #002268;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 48, 135, 0.2);
      }

      .reset-button:disabled {
        background: #94a3b8;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
      }

      .back-link {
        text-align: center;
        margin-top: 1rem;
      }

      .back-link a {
        color: #003087;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: color 0.2s ease;
      }

      .back-link a:hover {
        color: #002268;
      }

      .message {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        transition: all 0.3s ease;
      }

      .message.error {
        background: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
      }

      .message.success {
        background: #f0fdf4;
        color: #16a34a;
        border: 1px solid #bbf7d0;
      }

      .message.hidden {
        display: none;
      }

      @media (max-width: 480px) {
        .reset-container {
          padding: 1rem;
        }

        .reset-header {
          padding: 1.5rem;
        }

        .reset-form {
          padding: 1.5rem;
        }

        .reset-title {
          font-size: 1.3rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="reset-container">
      <div class="reset-card">
        <div class="reset-header">
          <img
            src="/logo/USRad-Logo-final-white-text.png"
            alt="USRad Logo"
            class="reset-logo"
          />
          <h1 class="reset-title">Set New Password</h1>
          <p class="reset-subtitle">
            Choose a strong password for your provider account
          </p>
        </div>

        <form class="reset-form" id="reset-form">
          <!-- Error/Success Messages -->
          <div id="error-message" class="message error hidden"></div>
          <div id="success-message" class="message success hidden"></div>

          <div class="input-group">
            <label for="new-password" class="input-label">
              New Password<span class="asterisk">*</span>
            </label>
            <div class="input-wrapper">
              <input
                type="password"
                id="new-password"
                class="form-input"
                required
                placeholder="Enter new password"
              />
            </div>
            <div class="password-requirements">
              <div class="requirement" id="length-req">
                <span class="requirement-icon">✓</span>
                At least 8 characters
              </div>
              <div class="requirement" id="uppercase-req">
                <span class="requirement-icon">✓</span>
                One uppercase letter
              </div>
              <div class="requirement" id="lowercase-req">
                <span class="requirement-icon">✓</span>
                One lowercase letter
              </div>
              <div class="requirement" id="number-req">
                <span class="requirement-icon">✓</span>
                One number
              </div>
            </div>
          </div>

          <div class="input-group">
            <label for="confirm-password" class="input-label">
              Confirm Password<span class="asterisk">*</span>
            </label>
            <div class="input-wrapper">
              <input
                type="password"
                id="confirm-password"
                class="form-input"
                required
                placeholder="Confirm new password"
              />
            </div>
          </div>

          <button type="submit" class="reset-button" id="update-button">
            <span id="update-text">Update Password</span>
            <span id="update-loading" style="display: none;">Updating...</span>
          </button>

          <div class="back-link">
            <a href="/imaginglogin">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M19 12H5M12 19l-7-7 7-7"></path>
              </svg>
              Back to sign in
            </a>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Get environment variables
      const supabaseUrl = document.querySelector(
        'meta[name="supabase-url"]'
      )?.content;
      const supabaseAnonKey = document.querySelector(
        'meta[name="supabase-anon-key"]'
      )?.content;

      if (!supabaseUrl || !supabaseAnonKey) {
        console.error("Missing Supabase configuration");
        showError("Configuration error. Please contact support.");
      }

      // Load Supabase
      import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm")
        .then(({ createClient }) => {
          const supabaseClient = createClient(supabaseUrl, supabaseAnonKey);

          // DOM elements
          const form = document.getElementById("reset-form");
          const errorDiv = document.getElementById("error-message");
          const successDiv = document.getElementById("success-message");
          const updateButton = document.getElementById("update-button");
          const updateText = document.getElementById("update-text");
          const updateLoading = document.getElementById("update-loading");
          const newPasswordInput = document.getElementById("new-password");

          // Password requirements elements
          const requirements = {
            length: document.getElementById("length-req"),
            uppercase: document.getElementById("uppercase-req"),
            lowercase: document.getElementById("lowercase-req"),
            number: document.getElementById("number-req"),
          };

          // Utility functions
          function showError(message) {
            errorDiv.textContent = message;
            errorDiv.classList.remove("hidden");
            successDiv.classList.add("hidden");
          }

          function showSuccess(message) {
            successDiv.textContent = message;
            successDiv.classList.remove("hidden");
            errorDiv.classList.add("hidden");
          }

          function hideMessages() {
            errorDiv.classList.add("hidden");
            successDiv.classList.add("hidden");
          }

          function setLoading(loading) {
            updateButton.disabled = loading;
            if (loading) {
              updateText.style.display = "none";
              updateLoading.style.display = "inline";
            } else {
              updateText.style.display = "inline";
              updateLoading.style.display = "none";
            }
          }

          // Password validation
          function validatePassword(password) {
            const checks = {
              length: password.length >= 8,
              uppercase: /[A-Z]/.test(password),
              lowercase: /[a-z]/.test(password),
              number: /\d/.test(password),
            };

            // Update UI
            Object.keys(checks).forEach((key) => {
              if (checks[key]) {
                requirements[key].classList.add("valid");
              } else {
                requirements[key].classList.remove("valid");
              }
            });

            return Object.values(checks).every((check) => check);
          }

          // Real-time password validation
          newPasswordInput.addEventListener("input", (e) => {
            validatePassword(e.target.value);
          });

          // Handle password update
          async function handlePasswordUpdate(newPassword) {
            try {
              const { error } = await supabaseClient.auth.updateUser({
                password: newPassword,
              });

              if (error) {
                throw error;
              }

              showSuccess(
                "Password updated successfully! Redirecting to dashboard..."
              );

              // Update button to show success
              updateText.textContent = "Success!";
              updateButton.style.background = "#10b981";

              // Redirect after delay
              setTimeout(() => {
                window.location.href = "/dashboard";
              }, 2000);

              return { success: true };
            } catch (error) {
              console.error("Password update error:", error);

              if (error.message.includes("session_not_found")) {
                showError(
                  "Your reset link has expired. Please request a new one."
                );
              } else if (error.message.includes("same_password")) {
                showError(
                  "Please choose a different password from your current one."
                );
              } else {
                showError(
                  error.message ||
                    "Failed to update password. Please try again."
                );
              }

              return { success: false, error: error.message };
            }
          }

          // Form submission
          form.addEventListener("submit", async (e) => {
            e.preventDefault();
            hideMessages();

            const newPassword = document.getElementById("new-password").value;
            const confirmPassword =
              document.getElementById("confirm-password").value;

            // Validation
            if (!validatePassword(newPassword)) {
              showError("Please ensure your password meets all requirements.");
              return;
            }

            if (newPassword !== confirmPassword) {
              showError("Passwords do not match.");
              return;
            }

            setLoading(true);
            await handlePasswordUpdate(newPassword);
            setLoading(false);
          });

          // Check if user has a valid session
          window.addEventListener("load", async () => {
            try {
              const {
                data: { session },
              } = await supabaseClient.auth.getSession();

              if (!session) {
                showError(
                  "Your reset link has expired or is invalid. Please request a new one."
                );
                updateButton.disabled = true;
              }
            } catch (error) {
              console.error("Session check error:", error);
              showError("Unable to verify reset link. Please try again.");
            }
          });
        })
        .catch((error) => {
          console.error("Failed to load Supabase:", error);
          showError(
            "Failed to load authentication system. Please refresh the page."
          );
        });
    </script>
  </body>
</html>
