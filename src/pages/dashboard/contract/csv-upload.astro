---
import DashboardLayout from "../../../components/dashboard/DashboardLayout.astro";
---

<DashboardLayout title="Enterprise CSV Upload" user={null}>
  <div class="max-w-6xl mx-auto p-6 space-y-8">
    <!-- Header Section -->
    <div class="text-center space-y-4">
      <h1 class="text-3xl font-bold text-gray-900">Enterprise Facility Upload</h1>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Streamline your multi-location onboarding with bulk CSV facility upload and intelligent validation
      </p>
    </div>

    <!-- Upload Progress Indicator -->
    <div class="bg-white rounded-lg shadow-sm border p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold text-gray-900">Upload Progress</h2>
        <div class="text-sm text-gray-500" id="progress-text">Ready to upload</div>
      </div>
      
      <div class="flex items-center space-x-4">
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">1</div>
          <span class="text-sm font-medium text-blue-600">Upload</span>
        </div>
        <div class="flex-1 h-0.5 bg-gray-200">
          <div class="h-0.5 bg-blue-600 transition-all duration-300" id="progress-bar" style="width: 25%"></div>
        </div>
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center text-sm font-bold" id="validate-step">2</div>
          <span class="text-sm text-gray-500" id="validate-text">Validate</span>
        </div>
        <div class="flex-1 h-0.5 bg-gray-200">
          <div class="h-0.5 bg-gray-300 transition-all duration-300" id="progress-bar-2" style="width: 0%"></div>
        </div>
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center text-sm font-bold" id="review-step">3</div>
          <span class="text-sm text-gray-500" id="review-text">Review</span>
        </div>
        <div class="flex-1 h-0.5 bg-gray-200">
          <div class="h-0.5 bg-gray-300 transition-all duration-300" id="progress-bar-3" style="width: 0%"></div>
        </div>
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center text-sm font-bold" id="complete-step">4</div>
          <span class="text-sm text-gray-500" id="complete-text">Generate</span>
        </div>
      </div>
    </div>

    <!-- CSV Upload Section -->
    <div id="upload-section" class="bg-white rounded-lg shadow-sm border p-8 space-y-6">
      <div class="space-y-4">
        <h2 class="text-2xl font-semibold text-gray-900">Step 1: Upload Facility Data</h2>
        <p class="text-gray-600">Upload a CSV file with your facility information. Use our template to ensure proper formatting.</p>
      </div>

      <!-- Template Download -->
      <div class="bg-blue-50 border-l-4 border-blue-500 p-6 rounded-r-lg">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <svg class="w-5 h-5 text-blue-500 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3 flex-1">
            <h3 class="text-sm font-semibold text-blue-900">CSV Template Required</h3>
            <p class="text-sm text-blue-800 mt-1">Download our template to ensure your CSV file has the correct format and field mapping.</p>
            <button 
              id="download-template"
              class="mt-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded-lg transition-colors duration-200 text-sm flex items-center"
            >
              <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
              </svg>
              Download CSV Template
            </button>
          </div>
        </div>
      </div>

      <!-- File Upload Area -->
      <div class="border-2 border-dashed border-gray-300 rounded-lg p-8">
        <div class="text-center">
          <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <div class="mt-4">
            <label for="csv-file-input" class="cursor-pointer">
              <span class="mt-2 block text-sm font-medium text-gray-900">
                Click to upload CSV file or drag and drop
              </span>
              <span class="mt-1 block text-sm text-gray-500">CSV files only, up to 10MB</span>
            </label>
            <input id="csv-file-input" name="csv-file" type="file" accept=".csv" class="sr-only">
          </div>
        </div>
      </div>

      <!-- Upload Button -->
      <div class="flex justify-center">
        <button 
          id="upload-csv-btn"
          disabled
          class="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200"
        >
          Upload and Validate CSV
        </button>
      </div>
    </div>

    <!-- Validation Section (Hidden Initially) -->
    <div id="validation-section" class="bg-white rounded-lg shadow-sm border p-8 space-y-6" style="display: none;">
      <div class="space-y-4">
        <h2 class="text-2xl font-semibold text-gray-900">Step 2: Validation Results</h2>
        <p class="text-gray-600">Review validation results and resolve any issues before proceeding.</p>
      </div>

      <!-- Validation Summary -->
      <div id="validation-summary" class="grid md:grid-cols-4 gap-4">
        <!-- Summary cards will be populated by JavaScript -->
      </div>

      <!-- Validation Issues -->
      <div id="validation-issues" style="display: none;">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Issues Requiring Attention</h3>
        <div id="validation-issues-list" class="space-y-3">
          <!-- Issues will be populated by JavaScript -->
        </div>
      </div>

      <!-- ACR Database Matches -->
      <div id="acr-matches" style="display: none;">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">ACR Database Matches</h3>
        <div id="acr-matches-list" class="space-y-3">
          <!-- Matches will be populated by JavaScript -->
        </div>
      </div>

      <!-- Validation Actions -->
      <div class="flex justify-between">
        <button 
          id="fix-issues-btn"
          class="bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
          style="display: none;"
        >
          Download Corrected CSV
        </button>
        
        <button 
          id="proceed-to-review-btn"
          disabled
          class="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200"
        >
          Proceed to Review
        </button>
      </div>
    </div>

    <!-- Review Section (Hidden Initially) -->
    <div id="review-section" class="bg-white rounded-lg shadow-sm border p-8 space-y-6" style="display: none;">
      <div class="space-y-4">
        <h2 class="text-2xl font-semibold text-gray-900">Step 3: Facility Review</h2>
        <p class="text-gray-600">Review all facilities before final processing. You can edit individual entries if needed.</p>
      </div>

      <!-- Facility List with Pagination -->
      <div id="facility-review-container">
        <!-- Paginated facility list will be populated by JavaScript -->
      </div>

      <!-- Pagination Controls -->
      <div id="pagination-controls" class="flex justify-between items-center">
        <!-- Pagination will be populated by JavaScript -->
      </div>

      <!-- Review Actions -->
      <div class="flex justify-between">
        <button 
          id="back-to-validation-btn"
          class="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          ‚Üê Back to Validation
        </button>
        
        <button 
          id="generate-exhibit-b-btn"
          class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200"
        >
          Generate Exhibit B
        </button>
      </div>
    </div>

    <!-- Completion Section (Hidden Initially) -->
    <div id="completion-section" class="bg-white rounded-lg shadow-sm border p-8 space-y-6" style="display: none;">
      <div class="text-center space-y-4">
        <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
          <svg class="w-8 h-8 text-green-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <h2 class="text-2xl font-semibold text-gray-900">Upload Complete!</h2>
        <p class="text-gray-600">Your facilities have been successfully uploaded and processed.</p>
      </div>

      <!-- Summary Stats -->
      <div id="completion-summary" class="grid md:grid-cols-3 gap-6">
        <!-- Summary will be populated by JavaScript -->
      </div>

      <!-- Next Steps -->
      <div class="bg-blue-50 p-6 rounded-lg">
        <h3 class="font-semibold text-blue-900 mb-3">Next Steps</h3>
        <ul class="space-y-2 text-sm text-blue-800">
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3"></span>
            <span>Review your Exhibit B preview to verify all facility information</span>
          </li>
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3"></span>
            <span>Continue to PSA confirmation and digital signing</span>
          </li>
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3"></span>
            <span>Exhibit B will be generated and delivered after PSA signing</span>
          </li>
        </ul>
      </div>

      <!-- Final Actions -->
      <div class="flex justify-center space-x-4">
        <button 
          onclick="window.location.href='/dashboard/contract/exhibit-b-preview'"
          class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          Preview Exhibit B
        </button>
        
        <button 
          onclick="window.location.href='/dashboard/contract/confirmation'"
          class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          Continue to PSA Confirmation
        </button>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let uploadedData = [];
      let validatedData = [];
      let currentPage = 1;
      let facilitiesPerPage = 20;
      let totalFacilities = 0;
      
      setupEventListeners();
      
      function setupEventListeners() {
        // File input handling
        const fileInput = document.getElementById('csv-file-input');
        const uploadArea = fileInput.closest('.border-dashed');
        
        fileInput.addEventListener('change', handleFileSelect);
        
        // Drag and drop
        uploadArea.addEventListener('dragover', (e) => {
          e.preventDefault();
          uploadArea.classList.add('border-blue-500', 'bg-blue-50');
        });
        
        uploadArea.addEventListener('dragleave', (e) => {
          e.preventDefault();
          uploadArea.classList.remove('border-blue-500', 'bg-blue-50');
        });
        
        uploadArea.addEventListener('drop', (e) => {
          e.preventDefault();
          uploadArea.classList.remove('border-blue-500', 'bg-blue-50');
          const files = e.dataTransfer.files;
          if (files.length > 0) {
            fileInput.files = files;
            handleFileSelect({ target: fileInput });
          }
        });
        
        // Button handlers
        document.getElementById('download-template').addEventListener('click', downloadTemplate);
        document.getElementById('upload-csv-btn').addEventListener('click', uploadCSV);
        document.getElementById('proceed-to-review-btn').addEventListener('click', proceedToReview);
        document.getElementById('back-to-validation-btn').addEventListener('click', backToValidation);
        document.getElementById('generate-exhibit-b-btn').addEventListener('click', generateExhibitB);
      }
      
      function handleFileSelect(event) {
        const file = event.target.files[0];
        const uploadBtn = document.getElementById('upload-csv-btn');
        
        if (file) {
          if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
            alert('Please select a CSV file.');
            return;
          }
          
          if (file.size > 10 * 1024 * 1024) { // 10MB limit
            alert('File size must be under 10MB.');
            return;
          }
          
          uploadBtn.disabled = false;
          uploadBtn.textContent = `Upload "${file.name}"`;
        } else {
          uploadBtn.disabled = true;
          uploadBtn.textContent = 'Upload and Validate CSV';
        }
      }
      
      function downloadTemplate() {
        // Create CSV template
        const csvContent = `facility_name,street_address,city,state,zip_code,acr_facility_id,modalities,equipment_brands,is_primary
"Main Imaging Center","123 Healthcare Blvd","Anytown","CA","90210","ACR123456","MRI,CT,X-Ray","GE,Siemens","true"
"North Branch Clinic","456 Medical Way","Northside","CA","90211","ACR789012","Ultrasound,Mammography","Philips","false"
"South Diagnostic Center","789 Wellness St","Southville","CA","90212","ACR345678","CT,MRI,PET","Siemens,GE","false"`;
        
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'facility_upload_template.csv';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
      }
      
      async function uploadCSV() {
        const fileInput = document.getElementById('csv-file-input');
        const file = fileInput.files[0];
        
        if (!file) return;
        
        updateProgress('uploading', 'Uploading and parsing CSV file...');
        
        try {
          // Parse CSV file
          const csvText = await file.text();
          const parsedData = parseCSV(csvText);
          
          if (parsedData.length === 0) {
            throw new Error('No valid data found in CSV file');
          }
          
          uploadedData = parsedData;
          
          // Validate data
          await validateData(parsedData);
          
        } catch (error) {
          console.error('Upload error:', error);
          alert('Error processing CSV file: ' + error.message);
          updateProgress('error', 'Upload failed');
        }
      }
      
      function parseCSV(csvText) {
        const lines = csvText.split('\n').filter(line => line.trim());
        if (lines.length < 2) {
          throw new Error('CSV file must contain a header row and at least one data row');
        }
        
        const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
        const requiredFields = ['facility_name', 'street_address', 'city', 'state', 'zip_code'];
        
        // Check for required fields
        for (const field of requiredFields) {
          if (!headers.includes(field)) {
            throw new Error(`Required field missing: ${field}`);
          }
        }
        
        const data = [];
        for (let i = 1; i < lines.length; i++) {
          const values = lines[i].split(',').map(v => v.replace(/"/g, '').trim());
          if (values.length >= requiredFields.length) {
            const facility = {};
            headers.forEach((header, index) => {
              facility[header] = values[index] || '';
            });
            data.push(facility);
          }
        }
        
        return data;
      }
      
      async function validateData(data) {
        updateProgress('validating', 'Validating facility data...');
        
        let validCount = 0;
        let errorCount = 0;
        let warningCount = 0;
        let acrMatches = 0;
        
        const issues = [];
        const acrMatchList = [];
        
        for (let i = 0; i < data.length; i++) {
          const facility = data[i];
          const rowIssues = [];
          
          // Required field validation
          if (!facility.facility_name) rowIssues.push('Facility name is required');
          if (!facility.street_address) rowIssues.push('Street address is required');
          if (!facility.city) rowIssues.push('City is required');
          if (!facility.state) rowIssues.push('State is required');
          if (!facility.zip_code) rowIssues.push('ZIP code is required');
          
          // Format validation
          if (facility.zip_code && !/^\d{5}(-\d{4})?$/.test(facility.zip_code)) {
            rowIssues.push('Invalid ZIP code format');
          }
          
          if (facility.state && facility.state.length !== 2) {
            rowIssues.push('State must be 2-letter code');
          }
          
          // ACR ID validation (if provided)
          if (facility.acr_facility_id) {
            // Simulate ACR database lookup
            const isAcrMatch = Math.random() > 0.3; // 70% chance of match
            if (isAcrMatch) {
              acrMatches++;
              acrMatchList.push({
                row: i + 2,
                facility_name: facility.facility_name,
                acr_id: facility.acr_facility_id,
                match_confidence: Math.random() > 0.5 ? 'High' : 'Medium'
              });
            } else {
              rowIssues.push('ACR facility ID not found in database');
            }
          }
          
          if (rowIssues.length === 0) {
            validCount++;
          } else {
            errorCount++;
            issues.push({
              row: i + 2,
              facility_name: facility.facility_name,
              issues: rowIssues
            });
          }
        }
        
        validatedData = data;
        totalFacilities = data.length;
        
        // Show validation results
        showValidationResults({
          total: data.length,
          valid: validCount,
          errors: errorCount,
          warnings: warningCount,
          acrMatches: acrMatches
        }, issues, acrMatchList);
        
        updateProgress('validated', 'Validation complete');
      }
      
      function showValidationResults(summary, issues, acrMatches) {
        // Hide upload section, show validation section
        document.getElementById('upload-section').style.display = 'none';
        document.getElementById('validation-section').style.display = 'block';
        
        // Populate summary
        const summaryContainer = document.getElementById('validation-summary');
        summaryContainer.innerHTML = `
          <div class="bg-blue-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-blue-600">${summary.total}</div>
            <div class="text-sm text-blue-700">Total Facilities</div>
          </div>
          <div class="bg-green-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-green-600">${summary.valid}</div>
            <div class="text-sm text-green-700">Valid Entries</div>
          </div>
          <div class="bg-red-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-red-600">${summary.errors}</div>
            <div class="text-sm text-red-700">Errors</div>
          </div>
          <div class="bg-purple-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-purple-600">${summary.acrMatches}</div>
            <div class="text-sm text-purple-700">ACR Matches</div>
          </div>
        `;
        
        // Show issues if any
        if (issues.length > 0) {
          document.getElementById('validation-issues').style.display = 'block';
          const issuesList = document.getElementById('validation-issues-list');
          issuesList.innerHTML = issues.map(issue => `
            <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-r-lg">
              <div class="font-semibold text-red-900">Row ${issue.row}: ${issue.facility_name}</div>
              <ul class="mt-2 text-sm text-red-800">
                ${issue.issues.map(i => `<li>‚Ä¢ ${i}</li>`).join('')}
              </ul>
            </div>
          `).join('');
          
          document.getElementById('fix-issues-btn').style.display = 'block';
        }
        
        // Show ACR matches if any
        if (acrMatches.length > 0) {
          document.getElementById('acr-matches').style.display = 'block';
          const matchesList = document.getElementById('acr-matches-list');
          matchesList.innerHTML = acrMatches.map(match => `
            <div class="bg-green-50 border-l-4 border-green-500 p-4 rounded-r-lg">
              <div class="font-semibold text-green-900">Row ${match.row}: ${match.facility_name}</div>
              <div class="text-sm text-green-800 mt-1">
                ACR ID: ${match.acr_id} (${match.match_confidence} confidence match)
              </div>
            </div>
          `).join('');
        }
        
        // Enable proceed button if no errors
        const proceedBtn = document.getElementById('proceed-to-review-btn');
        proceedBtn.disabled = summary.errors > 0;
      }
      
      function proceedToReview() {
        // Hide validation section, show review section
        document.getElementById('validation-section').style.display = 'none';
        document.getElementById('review-section').style.display = 'block';
        
        updateProgress('reviewing', 'Reviewing facilities...');
        showFacilityReview();
      }
      
      function showFacilityReview() {
        const totalPages = Math.ceil(totalFacilities / facilitiesPerPage);
        const startIndex = (currentPage - 1) * facilitiesPerPage;
        const endIndex = Math.min(startIndex + facilitiesPerPage, totalFacilities);
        const pageData = validatedData.slice(startIndex, endIndex);
        
        const container = document.getElementById('facility-review-container');
        container.innerHTML = `
          <div class="space-y-4">
            <div class="flex justify-between items-center">
              <h3 class="text-lg font-semibold text-gray-900">
                Facilities ${startIndex + 1}-${endIndex} of ${totalFacilities}
              </h3>
              <div class="text-sm text-gray-500">Page ${currentPage} of ${totalPages}</div>
            </div>
            
            <div class="grid gap-4">
              ${pageData.map((facility, index) => createFacilityReviewCard(facility, startIndex + index)).join('')}
            </div>
          </div>
        `;
        
        // Setup pagination
        setupPagination(totalPages);
      }
      
      function createFacilityReviewCard(facility, index) {
        return `
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <div class="flex justify-between items-start">
              <div class="flex-1 grid md:grid-cols-3 gap-4">
                <div>
                  <h4 class="font-semibold text-gray-900">${facility.facility_name}</h4>
                  <div class="text-sm text-gray-600 mt-1">
                    ${facility.street_address}<br>
                    ${facility.city}, ${facility.state} ${facility.zip_code}
                  </div>
                </div>
                <div>
                  ${facility.acr_facility_id ? `
                    <div class="text-sm">
                      <span class="font-medium">ACR ID:</span> ${facility.acr_facility_id}
                    </div>
                  ` : ''}
                  ${facility.modalities ? `
                    <div class="text-sm">
                      <span class="font-medium">Modalities:</span> ${facility.modalities}
                    </div>
                  ` : ''}
                </div>
                <div>
                  ${facility.equipment_brands ? `
                    <div class="text-sm">
                      <span class="font-medium">Equipment:</span> ${facility.equipment_brands}
                    </div>
                  ` : ''}
                  ${facility.is_primary === 'true' ? `
                    <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">Primary</span>
                  ` : ''}
                </div>
              </div>
              <button 
                onclick="editFacility(${index})"
                class="text-blue-600 hover:text-blue-800 text-sm font-medium ml-4"
              >
                Edit
              </button>
            </div>
          </div>
        `;
      }
      
      function setupPagination(totalPages) {
        if (totalPages <= 1) {
          document.getElementById('pagination-controls').innerHTML = '';
          return;
        }
        
        let paginationHtml = `
          <button 
            onclick="changePage(${currentPage - 1})"
            ${currentPage === 1 ? 'disabled' : ''}
            class="bg-gray-300 hover:bg-gray-400 disabled:opacity-50 disabled:cursor-not-allowed text-gray-700 px-3 py-2 rounded"
          >
            ‚Üê Previous
          </button>
          <span class="text-sm text-gray-600">Page ${currentPage} of ${totalPages}</span>
          <button 
            onclick="changePage(${currentPage + 1})"
            ${currentPage === totalPages ? 'disabled' : ''}
            class="bg-gray-300 hover:bg-gray-400 disabled:opacity-50 disabled:cursor-not-allowed text-gray-700 px-3 py-2 rounded"
          >
            Next ‚Üí
          </button>
        `;
        
        document.getElementById('pagination-controls').innerHTML = paginationHtml;
      }
      
      window.changePage = function(page) {
        const totalPages = Math.ceil(totalFacilities / facilitiesPerPage);
        if (page >= 1 && page <= totalPages) {
          currentPage = page;
          showFacilityReview();
        }
      };
      
      window.editFacility = function(index) {
        alert(`Edit functionality for facility ${index + 1} would open a modal here.`);
      };
      
      function backToValidation() {
        document.getElementById('review-section').style.display = 'none';
        document.getElementById('validation-section').style.display = 'block';
        updateProgress('validated', 'Back to validation');
      }
      
      async function generateExhibitB() {
        updateProgress('generating', 'Generating Exhibit B and saving facilities...');
        
        try {
          // Save facilities to database
          await saveFacilitiesToDatabase();
          
          // Show completion
          document.getElementById('review-section').style.display = 'none';
          document.getElementById('completion-section').style.display = 'block';
          
          updateProgress('complete', 'Upload complete!');
          
          // Populate completion summary
          document.getElementById('completion-summary').innerHTML = `
            <div class="text-center">
              <div class="text-3xl font-bold text-green-600">${totalFacilities}</div>
              <div class="text-sm text-gray-600">Facilities Uploaded</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-blue-600">${validatedData.filter(f => f.acr_facility_id).length}</div>
              <div class="text-sm text-gray-600">ACR Verified</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-purple-600">${validatedData.filter(f => f.is_primary === 'true').length}</div>
              <div class="text-sm text-gray-600">Primary Facilities</div>
            </div>
          `;
          
        } catch (error) {
          console.error('Error generating Exhibit B:', error);
          alert('Error saving facilities: ' + error.message);
        }
      }
      
      async function saveFacilitiesToDatabase() {
        if (!window.USRadUser || !window.USRadUser.user) {
          throw new Error('User not authenticated');
        }
        
        const user = window.USRadUser.user;
        const supabase = window.USRadUser.supabase;
        
        // Prepare facility data for database
        const facilitiesToSave = validatedData.map(facility => ({
          user_id: user.id,
          acr_facility_id: facility.acr_facility_id || null,
          facility_name: facility.facility_name,
          street_address: facility.street_address,
          city: facility.city,
          state: facility.state,
          zip_code: facility.zip_code,
          is_primary: facility.is_primary === 'true',
          is_acr_verified: !!facility.acr_facility_id,
          modalities: facility.modalities || null,
          equipment_brands: facility.equipment_brands || null
        }));
        
        // Clear existing facilities for this user
        await supabase
          .from('user_facilities')
          .delete()
          .eq('user_id', user.id);
        
        // Insert new facilities
        const { error } = await supabase
          .from('user_facilities')
          .insert(facilitiesToSave);
        
        if (error) {
          throw error;
        }
      }
      
      function updateProgress(stage, message) {
        document.getElementById('progress-text').textContent = message;
        
        const stages = {
          'uploading': { step: 1, progress: [25, 0, 0] },
          'validating': { step: 2, progress: [100, 50, 0] },
          'validated': { step: 2, progress: [100, 100, 0] },
          'reviewing': { step: 3, progress: [100, 100, 50] },
          'generating': { step: 4, progress: [100, 100, 100] },
          'complete': { step: 4, progress: [100, 100, 100] }
        };
        
        const config = stages[stage];
        if (config) {
          // Update step indicators
          ['validate-step', 'review-step', 'complete-step'].forEach((id, index) => {
            const element = document.getElementById(id);
            const textElement = document.getElementById(id.replace('-step', '-text'));
            
            if (index + 2 <= config.step) {
              element.className = element.className.replace('bg-gray-300 text-gray-600', 'bg-blue-600 text-white');
              textElement.className = textElement.className.replace('text-gray-500', 'text-blue-600 font-medium');
            }
          });
          
          // Update progress bars
          ['progress-bar', 'progress-bar-2', 'progress-bar-3'].forEach((id, index) => {
            document.getElementById(id).style.width = config.progress[index] + '%';
          });
        }
      }
    });
  </script>
</DashboardLayout>