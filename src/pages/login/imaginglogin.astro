---
// Updated to use Supabase Auth - preserving all original design
// Add this to the frontmatter at the top of your imaginglogin.astro file
// imaginglogin.astro
import { supabase } from "@/lib/supabase"; // Optional if using module script later
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="supabase-url" content={supabaseUrl} />
    <meta name="supabase-anon-key" content={supabaseAnonKey} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Imaging Center Login | USRad</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <!-- Import Supabase -->
    <style>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      html,
      body {
        margin: 0;
        padding: 0;
        height: 100%;
        font-family:
          "Inter",
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          sans-serif;
        background: white;
        animation: fadeIn 0.6s ease;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .login-layout {
        display: flex;
        min-height: 100vh;
      }

      .logo-side {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2.5rem 3rem 3.5rem 3rem; /* top right bottom left */
        background: linear-gradient(135deg, #003087 0%, #001a4d 100%);
        position: relative;
        overflow: hidden;
      }

      .logo-side::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23e6c378' fill-opacity='0.03'%3E%3Cpath d='M40 40c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20zm20 0c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        opacity: 0.4;
        z-index: 0;
      }

      .brand-content {
        position: relative;
        z-index: 1;
        text-align: center;
        max-width: 450px;
        /* CRITICAL: Perfect centering */
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }

      .logo-side img {
        max-width: 200px; /* Sweet spot between 155px and 180px */
        width: auto;
        height: auto;
        margin-bottom: 1.5rem;
        filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
        display: block;
      }
      .brand-title {
        color: white;
        font-size: 2.2rem;
        font-weight: 300;
        margin: 0 0 1.5rem 0;
        letter-spacing: -0.02em;
        /* CRITICAL: Remove any default margins that could offset centering */
        line-height: 1.2;
      }

      .brand-tagline {
        color: rgba(255, 255, 255, 0.85);
        font-size: 1.05rem;
        font-weight: 400;
        letter-spacing: 0.3px;
        margin: 0;
        text-align: center;
        line-height: 1.6;
        /* IMPROVED: Better max-width for readability */
        max-width: 380px;
      }

      .trust-indicators {
        position: absolute;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 2rem;
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.85rem;
      }

      .trust-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .form-side {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        padding: 2rem;
        position: relative;
      }

      .back-nav {
        position: absolute;
        top: 1.5rem;
        left: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #64748b;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        transition: color 0.2s ease;
      }

      .back-nav:hover {
        color: #003087;
      }

      .login-box {
        width: 100%;
        max-width: 380px;
      }

      .form-header {
        margin-bottom: 2rem;
      }

      .form-title {
        font-size: 1.75rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.5rem;
        letter-spacing: -0.02em;
      }

      .form-subtitle {
        color: #64748b;
        font-size: 1rem;
        line-height: 1.5;
      }

      .input-group {
        margin-bottom: 1.25rem;
      }

      .input-label {
        display: block;
        font-size: 0.9rem;
        font-weight: 500;
        color: #374151;
        margin-bottom: 0.5rem;
      }

      .asterisk {
        color: #e6c378;
        margin-left: 2px;
      }

      .input-wrapper {
        position: relative;
      }

      .form-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1.5px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s ease;
        background: #ffffff;
        font-family: "Inter", sans-serif;
      }

      .form-input:focus {
        outline: none;
        border-color: #003087;
        box-shadow: 0 0 0 3px rgba(0, 48, 135, 0.08);
      }

      .password-toggle {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #64748b;
        transition: color 0.2s ease;
      }

      .password-toggle:hover {
        color: #374151;
      }

      .form-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
      }

      .remember-me {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: #64748b;
      }

      .checkbox {
        width: 16px;
        height: 16px;
        accent-color: #003087;
      }

      .forgot-link {
        color: #003087;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        transition: color 0.2s ease;
      }

      .forgot-link:hover {
        color: #002268;
      }

      .login-button {
        width: 100%;
        padding: 0.875rem 1rem;
        background: #003087;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
        margin-bottom: 1.5rem;
        font-family: "Inter", sans-serif;
      }

      .login-button:hover {
        background: #002268;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 48, 135, 0.2);
      }

      .login-button:active {
        transform: translateY(0);
      }

      .login-button:disabled {
        background: #94a3b8;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
      }

      .divider {
        display: flex;
        align-items: center;
        margin: 1.5rem 0;
        color: #64748b;
        font-size: 0.85rem;
      }

      .divider::before,
      .divider::after {
        content: "";
        flex: 1;
        height: 1px;
        background: #e2e8f0;
      }

      .divider span {
        padding: 0 1rem;
      }

      .sso-options {
        display: flex;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
      }

      .sso-button {
        flex: 1;
        padding: 0.75rem;
        border: 1.5px solid #e2e8f0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        font-weight: 500;
      }

      .sso-button:hover {
        border-color: #cbd5e1;
        background: #f8fafc;
      }

      .signup-link {
        text-align: center;
        color: #64748b;
        font-size: 0.9rem;
      }

      .signup-link a {
        color: #003087;
        text-decoration: none;
        font-weight: 500;
      }

      .signup-link a:hover {
        text-decoration: underline;
      }

      .security-footer {
        position: absolute;
        bottom: 1rem;
        right: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #94a3b8;
        font-size: 0.8rem;
      }

      /* Error/Success Messages */
      .message {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        transition: all 0.3s ease;
      }

      .message.error {
        background: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
      }

      .message.success {
        background: #f0fdf4;
        color: #16a34a;
        border: 1px solid #bbf7d0;
      }

      .message.hidden {
        display: none;
      }

      /* Forgot Password Styles */
      .forgot-password-form {
        display: none;
        animation: slideIn 0.3s ease;
      }

      .forgot-password-form.active {
        display: block;
      }

      .back-to-login {
        color: #003087;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
        transition: color 0.2s ease;
      }

      .back-to-login:hover {
        color: #002268;
      }

      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateX(20px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      @media (max-width: 768px) {
        .login-layout {
          flex-direction: column;
        }

        .logo-side {
          min-height: 220px;
          padding: 2rem 1rem;
          justify-content: center;
          /* ADDED: Better mobile padding balance */
          padding-top: 2rem;
          padding-bottom: 2.5rem;
        }

        .brand-content {
          max-width: 100%;
          /* ADDED: Ensure perfect centering on mobile */
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
        }

        .brand-title {
          font-size: 1.8rem;
          /* ADDED: Better mobile spacing */
          margin-bottom: 1rem;
          line-height: 1.2;
        }

        .brand-tagline {
          font-size: 0.95rem;
          display: block;
          /* ADDED: Better mobile max-width */
          max-width: 300px;
          line-height: 1.6;
        }

        .trust-indicators {
          display: none;
        }

        .form-side {
          padding: 1.5rem;
        }

        .form-title {
          font-size: 1.5rem;
        }

        .sso-options {
          flex-direction: column;
        }

        .logo-side img {
          max-width: 130px; /* Reduced from 140px */
          margin-bottom: 1.2rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="login-layout">
      <div class="logo-side">
        <a href="/login" class="back-nav">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M19 12H5M12 19l-7-7 7-7"></path>
          </svg>
          Back to portal selection
        </a>

        <div class="brand-content">
          <!-- CLEANED UP: Removed "Imaging Center Log In" text -->
          <img src="/logo/USRad-Logo-final-white-text.png" alt="USRad Logo" />
          <!-- CENTERED: Logo and Provider Portal are now centered together -->
          <h1 class="brand-title">Provider Portal</h1>
          <p class="brand-tagline">
            Streamline your imaging operations with our comprehensive provider
            platform
          </p>
        </div>

        <div class="trust-indicators">
          <div class="trust-item">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"
              ></path>
            </svg>
            HIPAA Compliant
          </div>
          <div class="trust-item">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM12 17c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM15.1 8H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"
              ></path>
            </svg>
            256-bit SSL
          </div>
          <div class="trust-item">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            SOC 2 Certified
          </div>
        </div>
      </div>

      <div class="form-side">
        <form class="login-box" id="login-form">
          <div class="form-header">
            <h2 class="form-title">Welcome back</h2>
            <p class="form-subtitle">
              Sign in to your imaging center dashboard
            </p>
          </div>

          <!-- Error/Success Messages -->
          <div id="error-message" class="message error hidden"></div>
          <div id="success-message" class="message success hidden"></div>

          <div class="input-group">
            <label for="email" class="input-label"
              >Work email<span class="asterisk">*</span></label
            >
            <div class="input-wrapper">
              <input
                type="email"
                id="email"
                name="email"
                class="form-input"
                required
                placeholder="name@imagingcenter.com"
              />
            </div>
          </div>

          <div class="input-group">
            <label for="password" class="input-label"
              >Password<span class="asterisk">*</span></label
            >
            <div class="input-wrapper">
              <input
                type="password"
                id="password"
                name="password"
                class="form-input"
                required
                placeholder="Enter your password"
              />
              <span class="password-toggle" onclick="togglePassword()">
                <svg
                  id="eye-closed"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
                <svg
                  id="eye-open"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  style="display: none;"
                >
                  <path
                    d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"
                  ></path>
                  <line x1="1" y1="1" x2="23" y2="23"></line>
                </svg>
              </span>
            </div>
          </div>

          <div class="form-options">
            <label class="remember-me">
              <input type="checkbox" class="checkbox" />
              Keep me signed in
            </label>
            <a href="#" class="forgot-link" onclick="showForgotPassword(event)"
              >Forgot password?</a
            >
          </div>

          <button type="submit" class="login-button" id="login-button">
            <span id="login-text">Sign in to dashboard</span>
            <span id="login-loading" style="display: none;">Signing in...</span>
          </button>

          <div class="divider">
            <span>or continue with</span>
          </div>

          <div class="sso-options">
            <button
              type="button"
              class="sso-button"
              onclick="signInWithGoogle()"
            >
              <svg width="18" height="18" viewBox="0 0 24 24">
                <path
                  fill="#4285f4"
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                ></path>
                <path
                  fill="#34a853"
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                ></path>
                <path
                  fill="#fbbc05"
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                ></path>
                <path
                  fill="#ea4335"
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                ></path>
              </svg>
              Google
            </button>
            <button
              type="button"
              class="sso-button"
              onclick="signInWithMicrosoft()"
            >
              <svg width="18" height="18" viewBox="0 0 24 24" fill="#0078d4">
                <path
                  d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z"
                ></path>
              </svg>
              Microsoft
            </button>
          </div>

          <div class="signup-link">
            New imaging center? <a href="/imaging-center/signup"
              >Get started with USRad</a
            >
          </div>
        </form>

        <form class="login-box forgot-password-form" id="forgot-password-form">
          <div class="form-header">
            <a href="#" class="back-to-login" onclick="showLoginForm(event)">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M19 12H5M12 19l-7-7 7-7"></path>
              </svg>
              Back to sign in
            </a>

            <h2 class="form-title">Reset password</h2>
            <p class="form-subtitle">
              Enter your email address and we'll send you a link to reset your
              password
            </p>
          </div>

          <!-- Error/Success Messages for forgot password -->
          <div id="forgot-error-message" class="message error hidden"></div>
          <div id="forgot-success-message" class="message success hidden"></div>

          <div class="input-group">
            <label for="reset-email" class="input-label"
              >Work email<span class="asterisk">*</span></label
            >
            <div class="input-wrapper">
              <input
                type="email"
                id="reset-email"
                name="email"
                class="form-input"
                required
                placeholder="name@imagingcenter.com"
              />
            </div>
          </div>

          <button type="submit" class="login-button" id="reset-button">
            <span id="reset-text">Send reset link</span>
            <span id="reset-loading" style="display: none;">Sending...</span>
          </button>

          <div class="signup-link">
            Remember your password? <a href="#" onclick="showLoginForm(event)"
              >Sign in instead</a
            >
          </div>
        </form>

        <div class="security-footer">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"
            ></path>
          </svg>
          Secured by enterprise-grade encryption
        </div>
      </div>
    </div>

    <script>
      // Get environment variables passed from Astro
      const supabaseUrl = document.querySelector(
        'meta[name="supabase-url"]'
      )?.content;
      const supabaseAnonKey = document.querySelector(
        'meta[name="supabase-anon-key"]'
      )?.content;

      console.log("Environment check:", {
        url: supabaseUrl ? "Present" : "Missing",
        key: supabaseAnonKey ? "Present" : "Missing",
      });

      if (!supabaseUrl || !supabaseAnonKey) {
        console.error("Missing Supabase configuration");
        showError("Configuration error. Please contact support.");
      }

      // Load Supabase from CDN
      import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm")
        .then(({ createClient }) => {
          const supabase = createClient(supabaseUrl, supabaseAnonKey);

          // DOM elements
          const form = document.getElementById("login-form");
          const errorDiv = document.getElementById("error-message");
          const successDiv = document.getElementById("success-message");
          const loginButton = document.getElementById("login-button");
          const loginText = document.getElementById("login-text");
          const loginLoading = document.getElementById("login-loading");

          // Utility functions
          function showError(message) {
            errorDiv.textContent = message;
            errorDiv.classList.remove("hidden");
            successDiv.classList.add("hidden");
          }

          function showSuccess(message) {
            successDiv.textContent = message;
            successDiv.classList.remove("hidden");
            errorDiv.classList.add("hidden");
          }

          function hideMessages() {
            errorDiv.classList.add("hidden");
            successDiv.classList.add("hidden");
          }

          function setLoading(loading) {
            loginButton.disabled = loading;
            if (loading) {
              loginText.style.display = "none";
              loginLoading.style.display = "inline";
            } else {
              loginText.style.display = "inline";
              loginLoading.style.display = "none";
            }
          }

          // Password toggle function (keeping your original)
          window.togglePassword = function () {
            const passwordInput = document.getElementById("password");
            const eyeClosed = document.getElementById("eye-closed");
            const eyeOpen = document.getElementById("eye-open");

            if (passwordInput.type === "password") {
              passwordInput.type = "text";
              eyeClosed.style.display = "none";
              eyeOpen.style.display = "block";
            } else {
              passwordInput.type = "password";
              eyeClosed.style.display = "block";
              eyeOpen.style.display = "none";
            }
          };

          // Main login function
          async function handleLogin(email, password) {
            try {
              const { data, error } = await supabase.auth.signInWithPassword({
                email: email,
                password: password,
              });

              if (error) {
                throw error;
              }

              if (data.user) {
                showSuccess("Login successful! Redirecting to dashboard...");

                // Update button to show success
                loginText.textContent = "Success! Redirecting...";
                loginButton.style.background = "#10b981";

                // Redirect to dashboard after short delay
                setTimeout(() => {
                  window.location.href = "/dashboard";
                }, 1000);

                return { success: true, data };
              }
            } catch (error) {
              console.error("Login error:", error);

              // Handle specific error types
              if (error.message.includes("Invalid login credentials")) {
                showError("Invalid email or password. Please try again.");
              } else if (error.message.includes("Email not confirmed")) {
                showError(
                  "Please check your email and confirm your account before signing in."
                );
              } else if (error.message.includes("Too many requests")) {
                showError(
                  "Too many login attempts. Please wait a moment and try again."
                );
              } else {
                showError(error.message || "Login failed. Please try again.");
              }

              return { success: false, error: error.message };
            }
          }

          // SSO functions (placeholders for future implementation)
          window.signInWithGoogle = async function () {
            try {
              const { data, error } = await supabase.auth.signInWithOAuth({
                provider: "google",
                options: {
                  redirectTo: `${window.location.origin}/dashboard`,
                },
              });

              if (error) throw error;
            } catch (error) {
              showError(
                "Google sign-in is not yet available. Please use email/password."
              );
            }
          };

          window.signInWithMicrosoft = async function () {
            try {
              const { data, error } = await supabase.auth.signInWithOAuth({
                provider: "azure",
                options: {
                  redirectTo: `${window.location.origin}/dashboard`,
                },
              });

              if (error) throw error;
            } catch (error) {
              showError(
                "Microsoft sign-in is not yet available. Please use email/password."
              );
            }
          };

          // Form switching functions
          window.showForgotPassword = function (e) {
            e.preventDefault();
            document.getElementById("login-form").style.display = "none";
            document
              .getElementById("forgot-password-form")
              .classList.add("active");

            // Clear any existing messages
            hideMessages();
            hideForgotMessages();

            // Focus on email input
            setTimeout(() => {
              document.getElementById("reset-email").focus();
            }, 100);
          };

          window.showLoginForm = function (e) {
            e.preventDefault();
            document
              .getElementById("forgot-password-form")
              .classList.remove("active");
            document.getElementById("login-form").style.display = "block";

            // Clear any existing messages
            hideMessages();
            hideForgotMessages();
          };

          // Forgot password utility functions
          function showForgotError(message) {
            const errorDiv = document.getElementById("forgot-error-message");
            const successDiv = document.getElementById(
              "forgot-success-message"
            );
            errorDiv.textContent = message;
            errorDiv.classList.remove("hidden");
            successDiv.classList.add("hidden");
          }

          function showForgotSuccess(message) {
            const errorDiv = document.getElementById("forgot-error-message");
            const successDiv = document.getElementById(
              "forgot-success-message"
            );
            successDiv.textContent = message;
            successDiv.classList.remove("hidden");
            errorDiv.classList.add("hidden");
          }

          function hideForgotMessages() {
            document
              .getElementById("forgot-error-message")
              .classList.add("hidden");
            document
              .getElementById("forgot-success-message")
              .classList.add("hidden");
          }

          function setResetLoading(loading) {
            const resetButton = document.getElementById("reset-button");
            const resetText = document.getElementById("reset-text");
            const resetLoading = document.getElementById("reset-loading");

            resetButton.disabled = loading;
            if (loading) {
              resetText.style.display = "none";
              resetLoading.style.display = "inline";
            } else {
              resetText.style.display = "inline";
              resetLoading.style.display = "none";
            }
          }

          // Password reset handler
          async function handlePasswordReset(email) {
            try {
              const { error } = await supabase.auth.resetPasswordForEmail(
                email,
                {
                  redirectTo: `${window.location.origin}/auth/reset-password`,
                }
              );

              if (error) {
                throw error;
              }

              showForgotSuccess(
                `Reset link sent to ${email}. Check your inbox and follow the instructions.`
              );

              // Update button to show success
              document.getElementById("reset-text").textContent = "Email sent!";
              document.getElementById("reset-button").style.background =
                "#10b981";

              return { success: true };
            } catch (error) {
              console.error("Password reset error:", error);

              if (error.message.includes("User not found")) {
                showForgotError("No account found with that email address.");
              } else if (error.message.includes("Too many requests")) {
                showForgotError(
                  "Too many reset attempts. Please wait a moment and try again."
                );
              } else {
                showForgotError(
                  error.message ||
                    "Failed to send reset email. Please try again."
                );
              }

              return { success: false, error: error.message };
            }
          }

          // Add form submission handler for forgot password
          document
            .getElementById("forgot-password-form")
            .addEventListener("submit", async (e) => {
              e.preventDefault();
              hideForgotMessages();
              setResetLoading(true);

              const formData = new FormData(e.target);
              const email = formData.get("email");

              // Basic validation
              if (!email) {
                showForgotError("Please enter your email address");
                setResetLoading(false);
                return;
              }

              // Attempt password reset
              const result = await handlePasswordReset(email);
              setResetLoading(false);
            });

          // Form submission handler
          form.addEventListener("submit", async (e) => {
            e.preventDefault();
            hideMessages();
            setLoading(true);

            const formData = new FormData(form);
            const email = formData.get("email");
            const password = formData.get("password");

            // Basic validation
            if (!email || !password) {
              showError("Please enter both email and password");
              setLoading(false);
              return;
            }

            // Attempt login
            const result = await handleLogin(email, password);

            if (!result.success) {
              setLoading(false);
            }
            // Note: if successful, redirect happens automatically so no need to setLoading(false)
          });

          // Check if user is already logged in
          window.addEventListener("load", async () => {
            try {
              const {
                data: { session },
              } = await supabase.auth.getSession();

              if (session) {
                // User is already logged in, redirect to dashboard
                window.location.href = "/dashboard";
              }
            } catch (error) {
              console.error("Session check error:", error);
              // Continue with login page
            }
          });
        })
        .catch((error) => {
          console.error("Failed to load Supabase:", error);
          showError(
            "Failed to load authentication system. Please refresh the page."
          );
        });
    </script>
  </body>
</html>
